C51 COMPILER V9.60.0.0   U8G2_INPUT_VALUE                                                  10/18/2024 17:39:04 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8G2_INPUT_VALUE
OBJECT MODULE PLACED IN .\Objects\u8g2_input_value.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8g2_input_value.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libar
                    -y\Device\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8g2_input_value.lst) 
                    -TABS(2) OBJECT(.\Objects\u8g2_input_value.obj)

line level    source

   1          /*
   2          
   3            u8g2_input_value.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          #include "u8g2.h"
  37          
  38          /*
  39            return:
  40              0: value is not changed (HOME/Break Button pressed)
  41              1: value has been updated
  42          */
  43          
  44          uint8_t u8g2_UserInterfaceInputValue(u8g2_t *u8g2, const char *title, const char *pre, uint8_t *value, uin
             -t8_t lo, uint8_t hi, uint8_t digits, const char *post)
  45          {
  46   1        uint8_t line_height;
  47   1        uint8_t height;
  48   1        u8g2_uint_t pixel_height;
  49   1        u8g2_uint_t  y, yy;
  50   1        u8g2_uint_t  pixel_width;
  51   1        u8g2_uint_t  x, xx;
  52   1        
C51 COMPILER V9.60.0.0   U8G2_INPUT_VALUE                                                  10/18/2024 17:39:04 PAGE 2   

  53   1        uint8_t local_value = *value;
  54   1        //uint8_t r; /* not used ??? */
  55   1        uint8_t event;
  56   1      
  57   1        /* only horizontal strings are supported, so force this here */
  58   1        u8g2_SetFontDirection(u8g2, 0);
  59   1      
  60   1        /* force baseline position */
  61   1        u8g2_SetFontPosBaseline(u8g2);
  62   1        
  63   1        /* calculate line height */
  64   1        line_height = u8g2_GetAscent(u8g2);
  65   1        line_height -= u8g2_GetDescent(u8g2);
  66   1        
  67   1        
  68   1        /* calculate overall height of the input value box */
  69   1        height = 1; /* value input line */
  70   1        height += u8x8_GetStringLineCnt(title);
  71   1      
  72   1        /* calculate the height in pixel */
  73   1        pixel_height = height;
  74   1        pixel_height *= line_height;
  75   1      
  76   1      
  77   1        /* calculate offset from top */
  78   1        y = 0;
  79   1        if ( pixel_height < u8g2_GetDisplayHeight(u8g2)  )
  80   1        {
  81   2          y = u8g2_GetDisplayHeight(u8g2);
  82   2          y -= pixel_height;
  83   2          y /= 2;
  84   2        }
  85   1        
  86   1        /* calculate offset from left for the label */
  87   1        x = 0;
  88   1        pixel_width = u8g2_GetUTF8Width(u8g2, pre);
  89   1        pixel_width += u8g2_GetUTF8Width(u8g2, "0") * digits;
  90   1        pixel_width += u8g2_GetUTF8Width(u8g2, post);
  91   1        if ( pixel_width < u8g2_GetDisplayWidth(u8g2) )
  92   1        {
  93   2          x = u8g2_GetDisplayWidth(u8g2);
  94   2          x -= pixel_width;
  95   2          x /= 2;
  96   2        }
  97   1        
  98   1        /* event loop */
  99   1        for(;;)
 100   1        {
 101   2          u8g2_FirstPage(u8g2);
 102   2          do
 103   2          {
 104   3            /* render */
 105   3            yy = y;
 106   3            yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 107   3            xx = x;
 108   3            xx += u8g2_DrawUTF8(u8g2, xx, yy, pre);
 109   3            xx += u8g2_DrawUTF8(u8g2, xx, yy, u8x8_u8toa(local_value, digits));
 110   3            u8g2_DrawUTF8(u8g2, xx, yy, post);
 111   3          } while( u8g2_NextPage(u8g2) );
 112   2          
 113   2      #ifdef U8G2_REF_MAN_PIC
                    return 0;
C51 COMPILER V9.60.0.0   U8G2_INPUT_VALUE                                                  10/18/2024 17:39:04 PAGE 3   

              #endif
 116   2          
 117   2          for(;;)
 118   2          {
 119   3            event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 120   3            if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 121   3            {
 122   4        *value = local_value;
 123   4        return 1;
 124   4            }
 125   3            else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 126   3            {
 127   4        return 0;
 128   4            }
 129   3            else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_UP )
 130   3            {
 131   4        if ( local_value >= hi )
 132   4          local_value = lo;
 133   4        else
 134   4          local_value++;
 135   4        break;
 136   4            }
 137   3            else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_DOWN )
 138   3            {
 139   4        if ( local_value <= lo )
 140   4          local_value = hi;
 141   4        else
 142   4          local_value--;
 143   4        break;
 144   4            }        
 145   3          }
 146   2        }
 147   1        
 148   1        /* never reached */
 149   1        //return r;  
 150   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    471    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      27
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
