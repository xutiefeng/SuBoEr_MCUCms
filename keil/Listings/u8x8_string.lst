C51 COMPILER V9.60.7.0   U8X8_STRING                                                       10/16/2024 15:44:21 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE U8X8_STRING
OBJECT MODULE PLACED IN .\Objects\u8x8_string.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\u8g2\u8x8_string.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\Device
                    -\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8x8_string.lst) TABS(2) OBJEC
                    -T(.\Objects\u8x8_string.obj)

line level    source

   1          /*
   2          
   3            u8x8_string.c
   4            
   5            string line procedures
   6            
   7            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8          
   9            Copyright (c) 2016, olikraus@gmail.com
  10            All rights reserved.
  11          
  12            Redistribution and use in source and binary forms, with or without modification, 
  13            are permitted provided that the following conditions are met:
  14          
  15            * Redistributions of source code must retain the above copyright notice, this list 
  16              of conditions and the following disclaimer.
  17              
  18            * Redistributions in binary form must reproduce the above copyright notice, this 
  19              list of conditions and the following disclaimer in the documentation and/or other 
  20              materials provided with the distribution.
  21          
  22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35          
  36          */
  37          
  38          #include "u8x8.h"
  39          
  40          uint8_t u8x8_GetStringLineCnt(const char *str)
  41          {
  42   1        char e;
  43   1        uint8_t line_cnt = 1;
  44   1        if ( str == NULL )
  45   1          return 0;
  46   1        for(;;)
  47   1        {
  48   2          e = *str;
  49   2          if ( e == '\0' )
  50   2            break;
  51   2          str++;
  52   2          if ( e == '\n' )
  53   2            line_cnt++;
C51 COMPILER V9.60.7.0   U8X8_STRING                                                       10/16/2024 15:44:21 PAGE 2   

  54   2        }
  55   1        return line_cnt;
  56   1      }
  57          
  58          
  59          /*
  60              Assumes strings, separated by '\n' in "str".
  61              Returns the string at index "line_idx". First strng has line_idx = 0
  62              Example:
  63                Returns "xyz" for line_idx = 1 with str = "abc\nxyz"
  64              Support both UTF8 and normal strings.
  65          */
  66          const char *u8x8_GetStringLineStart(uint8_t line_idx, const char *str )
  67          {
  68   1        char e;
  69   1        uint8_t line_cnt = 1;
  70   1        
  71   1        if ( line_idx == 0 )
  72   1          return str;
  73   1      
  74   1        for(;;)
  75   1        {
  76   2          e = *str;
  77   2          if ( e == '\0' )
  78   2            break;
  79   2          str++;
  80   2          if ( e == '\n' )
  81   2          {
  82   3            if ( line_cnt == line_idx )
  83   3        return str;
  84   3            line_cnt++;
  85   3          }
  86   2        }
  87   1        return NULL;  /* line not found */
  88   1      }
  89          
  90          /* copy until first '\n' or '\0' in str */
  91          /* Important: There is no string overflow check, ensure */
  92          /* that the destination buffer is large enough */
  93          void u8x8_CopyStringLine(char *dest, uint8_t line_idx, const char *str)
  94          {
  95   1        if ( dest == NULL )
  96   1          return;
  97   1        str = u8x8_GetStringLineStart( line_idx, str );
  98   1        if ( str != NULL )
  99   1        {
 100   2          for(;;)
 101   2          {
 102   3            if ( *str == '\n' || *str == '\0' )
 103   3        break;
 104   3            *dest = *str;
 105   3            dest++;
 106   3            str++;
 107   3          }
 108   2        }
 109   1        *dest = '\0';
 110   1      }
 111          
 112          /*
 113            Draw a string
 114            Extend the string to size "w"
 115            Center the string within "w"
C51 COMPILER V9.60.7.0   U8X8_STRING                                                       10/16/2024 15:44:21 PAGE 3   

 116            return the size of the string
 117          
 118          */
 119          uint8_t u8x8_DrawUTF8Line(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t w, const char *s)
 120          {
 121   1        uint8_t d, lw;
 122   1        uint8_t cx, dx;
 123   1          
 124   1        d = 0;
 125   1        
 126   1        lw = u8x8_GetUTF8Len(u8x8, s);
 127   1        if ( lw < w )
 128   1        {
 129   2          d = w;
 130   2          d -=lw;
 131   2          d /= 2;
 132   2        }
 133   1          
 134   1        cx = x;
 135   1        dx = cx + d;
 136   1        while( cx < dx )
 137   1        {
 138   2          u8x8_DrawUTF8(u8x8, cx, y, " ");
 139   2          cx++;
 140   2        }
 141   1        cx += u8x8_DrawUTF8(u8x8, cx, y, s);
 142   1        dx = x + w;
 143   1        while( cx < dx )
 144   1        {
 145   2          u8x8_DrawUTF8(u8x8, cx, y, " ");
 146   2          cx++;
 147   2        }
 148   1        cx -= x;
 149   1        return cx;
 150   1      }
 151          
 152          /*
 153            draw several lines at position x,y.
 154            lines are stored in s and must be separated with '\n'.
 155            lines can be centered with respect to "w" 
 156            if s == NULL nothing is drawn and 0 is returned
 157            returns the number of lines in s
 158          */
 159          uint8_t u8x8_DrawUTF8Lines(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t w, const char *s)
 160          {
 161   1        uint8_t i;
 162   1        uint8_t cnt;
 163   1        cnt = u8x8_GetStringLineCnt(s);
 164   1        for( i = 0; i < cnt; i++ )
 165   1        {
 166   2          u8x8_DrawUTF8Line(u8x8, x, y, w, u8x8_GetStringLineStart(i, s));
 167   2          y++;
 168   2        }
 169   1        return cnt;
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    410    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.7.0   U8X8_STRING                                                       10/16/2024 15:44:21 PAGE 4   

   DATA SIZE        =   ----      33
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
