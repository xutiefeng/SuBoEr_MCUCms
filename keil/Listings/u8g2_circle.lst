C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE U8G2_CIRCLE
OBJECT MODULE PLACED IN .\Objects\u8g2_circle.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\u8g2\u8g2_circle.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\Device
                    -\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8g2_circle.lst) TABS(2) OBJEC
                    -T(.\Objects\u8g2_circle.obj)

line level    source

   1          /*
   2          
   3            u8g2_circle.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33          
  34          */
  35          
  36          #include "u8g2.h"
  37          
  38          /*==============================================*/
  39          /* Circle */
  40          
  41          static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint
             -_t y0, uint8_t option) U8G2_NOINLINE;
  42          
  43          static void u8g2_draw_circle_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint
             -_t y0, uint8_t option)
  44          {
  45   1          /* upper right */
  46   1          if ( option & U8G2_DRAW_UPPER_RIGHT )
  47   1          {
  48   2            u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
  49   2            u8g2_DrawPixel(u8g2, x0 + y, y0 - x);
  50   2          }
  51   1          
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 2   

  52   1          /* upper left */
  53   1          if ( option & U8G2_DRAW_UPPER_LEFT )
  54   1          {
  55   2            u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
  56   2            u8g2_DrawPixel(u8g2, x0 - y, y0 - x);
  57   2          }
  58   1          
  59   1          /* lower right */
  60   1          if ( option & U8G2_DRAW_LOWER_RIGHT )
  61   1          {
  62   2            u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
  63   2            u8g2_DrawPixel(u8g2, x0 + y, y0 + x);
  64   2          }
  65   1          
  66   1          /* lower left */
  67   1          if ( option & U8G2_DRAW_LOWER_LEFT )
  68   1          {
  69   2            u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
  70   2            u8g2_DrawPixel(u8g2, x0 - y, y0 + x);
  71   2          }
  72   1      }
  73          
  74          static void u8g2_draw_circle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option
             -)
  75          {
  76   1          u8g2_int_t f;
  77   1          u8g2_int_t ddF_x;
  78   1          u8g2_int_t ddF_y;
  79   1          u8g2_uint_t x;
  80   1          u8g2_uint_t y;
  81   1      
  82   1          f = 1;
  83   1          f -= rad;
  84   1          ddF_x = 1;
  85   1          ddF_y = 0;
  86   1          ddF_y -= rad;
  87   1          ddF_y *= 2;
  88   1          x = 0;
  89   1          y = rad;
  90   1      
  91   1          u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
  92   1          
  93   1          while ( x < y )
  94   1          {
  95   2            if (f >= 0) 
  96   2            {
  97   3              y--;
  98   3              ddF_y += 2;
  99   3              f += ddF_y;
 100   3            }
 101   2            x++;
 102   2            ddF_x += 2;
 103   2            f += ddF_x;
 104   2      
 105   2            u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
 106   2          }
 107   1      }
 108          
 109          void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
 110          {
 111   1        /* check for bounding box */
 112   1      #ifdef U8G2_WITH_INTERSECTION
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 3   

 113   1        {
 114   2          if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 115   2            return;
 116   2        }
 117   1      #endif /* U8G2_WITH_INTERSECTION */
 118   1        
 119   1        
 120   1        /* draw circle */
 121   1        u8g2_draw_circle(u8g2, x0, y0, rad, option);
 122   1      }
 123          
 124          /*==============================================*/
 125          /* Disk */
 126          
 127          static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t
             - y0, uint8_t option) U8G2_NOINLINE;
 128          
 129          static void u8g2_draw_disc_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t
             - y0, uint8_t option)
 130          {
 131   1          /* upper right */
 132   1          if ( option & U8G2_DRAW_UPPER_RIGHT )
 133   1          {
 134   2            u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 135   2            u8g2_DrawVLine(u8g2, x0+y, y0-x, x+1);
 136   2          }
 137   1          
 138   1          /* upper left */
 139   1          if ( option & U8G2_DRAW_UPPER_LEFT )
 140   1          {
 141   2            u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 142   2            u8g2_DrawVLine(u8g2, x0-y, y0-x, x+1);
 143   2          }
 144   1          
 145   1          /* lower right */
 146   1          if ( option & U8G2_DRAW_LOWER_RIGHT )
 147   1          {
 148   2            u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 149   2            u8g2_DrawVLine(u8g2, x0+y, y0, x+1);
 150   2          }
 151   1          
 152   1          /* lower left */
 153   1          if ( option & U8G2_DRAW_LOWER_LEFT )
 154   1          {
 155   2            u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 156   2            u8g2_DrawVLine(u8g2, x0-y, y0, x+1);
 157   2          }
 158   1      }
 159          
 160          static void u8g2_draw_disc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
 161          {
 162   1        u8g2_int_t f;
 163   1        u8g2_int_t ddF_x;
 164   1        u8g2_int_t ddF_y;
 165   1        u8g2_uint_t x;
 166   1        u8g2_uint_t y;
 167   1      
 168   1        f = 1;
 169   1        f -= rad;
 170   1        ddF_x = 1;
 171   1        ddF_y = 0;
 172   1        ddF_y -= rad;
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 4   

 173   1        ddF_y *= 2;
 174   1        x = 0;
 175   1        y = rad;
 176   1      
 177   1        u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);
 178   1        
 179   1        while ( x < y )
 180   1        {
 181   2          if (f >= 0) 
 182   2          {
 183   3            y--;
 184   3            ddF_y += 2;
 185   3            f += ddF_y;
 186   3          }
 187   2          x++;
 188   2          ddF_x += 2;
 189   2          f += ddF_x;
 190   2      
 191   2          u8g2_draw_disc_section(u8g2, x, y, x0, y0, option);    
 192   2        }
 193   1      }
 194          
 195          void u8g2_DrawDisc(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
 196          {
 197   1        /* check for bounding box */
 198   1      #ifdef U8G2_WITH_INTERSECTION
 199   1        {
 200   2          if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
 201   2            return;
 202   2        }
 203   1      #endif /* U8G2_WITH_INTERSECTION */
 204   1        
 205   1        /* draw disc */
 206   1        u8g2_draw_disc(u8g2, x0, y0, rad, option);
 207   1      }
 208          
 209          /*==============================================*/
 210          /* Ellipse */
 211          
 212          /*
 213            Source: 
 214              Foley, Computer Graphics, p 90
 215          */
 216          static void u8g2_draw_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uin
             -t_t y0, uint8_t option) U8G2_NOINLINE;
 217          static void u8g2_draw_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uin
             -t_t y0, uint8_t option)
 218          {
 219   1          /* upper right */
 220   1          if ( option & U8G2_DRAW_UPPER_RIGHT )
 221   1          {
 222   2            u8g2_DrawPixel(u8g2, x0 + x, y0 - y);
 223   2          }
 224   1          
 225   1          /* upper left */
 226   1          if ( option & U8G2_DRAW_UPPER_LEFT )
 227   1          {
 228   2            u8g2_DrawPixel(u8g2, x0 - x, y0 - y);
 229   2          }
 230   1          
 231   1          /* lower right */
 232   1          if ( option & U8G2_DRAW_LOWER_RIGHT )
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 5   

 233   1          {
 234   2            u8g2_DrawPixel(u8g2, x0 + x, y0 + y);
 235   2          }
 236   1          
 237   1          /* lower left */
 238   1          if ( option & U8G2_DRAW_LOWER_LEFT )
 239   1          {
 240   2            u8g2_DrawPixel(u8g2, x0 - x, y0 + y);
 241   2          }
 242   1      }
 243          
 244          static void u8g2_draw_ellipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry
             -, uint8_t option)
 245          {
 246   1        u8g2_uint_t x, y;
 247   1        u8g2_long_t xchg, ychg;
 248   1        u8g2_long_t err;
 249   1        u8g2_long_t rxrx2;
 250   1        u8g2_long_t ryry2;
 251   1        u8g2_long_t stopx, stopy;
 252   1        
 253   1        rxrx2 = rx;
 254   1        rxrx2 *= rx;
 255   1        rxrx2 *= 2;
 256   1        
 257   1        ryry2 = ry;
 258   1        ryry2 *= ry;
 259   1        ryry2 *= 2;
 260   1        
 261   1        x = rx;
 262   1        y = 0;
 263   1        
 264   1        xchg = 1;
 265   1        xchg -= rx;
 266   1        xchg -= rx;
 267   1        xchg *= ry;
 268   1        xchg *= ry;
 269   1        
 270   1        ychg = rx;
 271   1        ychg *= rx;
 272   1        
 273   1        err = 0;
 274   1        
 275   1        stopx = ryry2;
 276   1        stopx *= rx;
 277   1        stopy = 0;
 278   1        
 279   1        while( stopx >= stopy )
 280   1        {
 281   2          u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
 282   2          y++;
 283   2          stopy += rxrx2;
 284   2          err += ychg;
 285   2          ychg += rxrx2;
 286   2          if ( 2*err+xchg > 0 )
 287   2          {
 288   3            x--;
 289   3            stopx -= ryry2;
 290   3            err += xchg;
 291   3            xchg += ryry2;      
 292   3          }
 293   2        }
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 6   

 294   1      
 295   1        x = 0;
 296   1        y = ry;
 297   1        
 298   1        xchg = ry;
 299   1        xchg *= ry;
 300   1        
 301   1        ychg = 1;
 302   1        ychg -= ry;
 303   1        ychg -= ry;
 304   1        ychg *= rx;
 305   1        ychg *= rx;
 306   1        
 307   1        err = 0;
 308   1        
 309   1        stopx = 0;
 310   1      
 311   1        stopy = rxrx2;
 312   1        stopy *= ry;
 313   1        
 314   1      
 315   1        while( stopx <= stopy )
 316   1        {
 317   2          u8g2_draw_ellipse_section(u8g2, x, y, x0, y0, option);
 318   2          x++;
 319   2          stopx += ryry2;
 320   2          err += xchg;
 321   2          xchg += ryry2;
 322   2          if ( 2*err+ychg > 0 )
 323   2          {
 324   3            y--;
 325   3            stopy -= rxrx2;
 326   3            err += ychg;
 327   3            ychg += rxrx2;
 328   3          }
 329   2        }
 330   1        
 331   1      }
 332          
 333          void u8g2_DrawEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, uint8_
             -t option)
 334          {
 335   1        /* check for bounding box */
 336   1      #ifdef U8G2_WITH_INTERSECTION
 337   1        {
 338   2          if ( u8g2_IsIntersection(u8g2, x0-rx, y0-ry, x0+rx+1, y0+ry+1) == 0 ) 
 339   2            return;
 340   2        }
 341   1      #endif /* U8G2_WITH_INTERSECTION */
 342   1        
 343   1        u8g2_draw_ellipse(u8g2, x0, y0, rx, ry, option);
 344   1      }
 345          
 346          /*==============================================*/
 347          /* Filled Ellipse */
 348          
 349          static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u
             -8g2_uint_t y0, uint8_t option) U8G2_NOINLINE;
 350          static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u
             -8g2_uint_t y0, uint8_t option)
 351          {
 352   1          /* upper right */
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 7   

 353   1          if ( option & U8G2_DRAW_UPPER_RIGHT )
 354   1          {
 355   2            u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
 356   2          }
 357   1          
 358   1          /* upper left */
 359   1          if ( option & U8G2_DRAW_UPPER_LEFT )
 360   1          {
 361   2            u8g2_DrawVLine(u8g2, x0-x, y0-y, y+1);
 362   2          }
 363   1          
 364   1          /* lower right */
 365   1          if ( option & U8G2_DRAW_LOWER_RIGHT )
 366   1          {
 367   2            u8g2_DrawVLine(u8g2, x0+x, y0, y+1);
 368   2          }
 369   1          
 370   1          /* lower left */
 371   1          if ( option & U8G2_DRAW_LOWER_LEFT )
 372   1          {
 373   2            u8g2_DrawVLine(u8g2, x0-x, y0, y+1);
 374   2          }
 375   1      }
 376          
 377          static void u8g2_draw_filled_ellipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_ui
             -nt_t ry, uint8_t option)
 378          {
 379   1        u8g2_uint_t x, y;
 380   1        u8g2_long_t xchg, ychg;
 381   1        u8g2_long_t err;
 382   1        u8g2_long_t rxrx2;
 383   1        u8g2_long_t ryry2;
 384   1        u8g2_long_t stopx, stopy;
 385   1        
 386   1        rxrx2 = rx;
 387   1        rxrx2 *= rx;
 388   1        rxrx2 *= 2;
 389   1        
 390   1        ryry2 = ry;
 391   1        ryry2 *= ry;
 392   1        ryry2 *= 2;
 393   1        
 394   1        x = rx;
 395   1        y = 0;
 396   1        
 397   1        xchg = 1;
 398   1        xchg -= rx;
 399   1        xchg -= rx;
 400   1        xchg *= ry;
 401   1        xchg *= ry;
 402   1        
 403   1        ychg = rx;
 404   1        ychg *= rx;
 405   1        
 406   1        err = 0;
 407   1        
 408   1        stopx = ryry2;
 409   1        stopx *= rx;
 410   1        stopy = 0;
 411   1        
 412   1        while( stopx >= stopy )
 413   1        {
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 8   

 414   2          u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 415   2          y++;
 416   2          stopy += rxrx2;
 417   2          err += ychg;
 418   2          ychg += rxrx2;
 419   2          if ( 2*err+xchg > 0 )
 420   2          {
 421   3            x--;
 422   3            stopx -= ryry2;
 423   3            err += xchg;
 424   3            xchg += ryry2;      
 425   3          }
 426   2        }
 427   1      
 428   1        x = 0;
 429   1        y = ry;
 430   1        
 431   1        xchg = ry;
 432   1        xchg *= ry;
 433   1        
 434   1        ychg = 1;
 435   1        ychg -= ry;
 436   1        ychg -= ry;
 437   1        ychg *= rx;
 438   1        ychg *= rx;
 439   1        
 440   1        err = 0;
 441   1        
 442   1        stopx = 0;
 443   1      
 444   1        stopy = rxrx2;
 445   1        stopy *= ry;
 446   1        
 447   1      
 448   1        while( stopx <= stopy )
 449   1        {
 450   2          u8g2_draw_filled_ellipse_section(u8g2, x, y, x0, y0, option);
 451   2          x++;
 452   2          stopx += ryry2;
 453   2          err += xchg;
 454   2          xchg += ryry2;
 455   2          if ( 2*err+ychg > 0 )
 456   2          {
 457   3            y--;
 458   3            stopy -= rxrx2;
 459   3            err += ychg;
 460   3            ychg += rxrx2;
 461   3          }
 462   2        }
 463   1        
 464   1      }
 465          
 466          void u8g2_DrawFilledEllipse(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rx, u8g2_uint_t ry, 
             -uint8_t option)
 467          {
 468   1        /* check for bounding box */
 469   1      #ifdef U8G2_WITH_INTERSECTION
 470   1        {
 471   2          if ( u8g2_IsIntersection(u8g2, x0-rx, y0-ry, x0+rx+1, y0+ry+1) == 0 ) 
 472   2            return;
 473   2        }
 474   1      #endif /* U8G2_WITH_INTERSECTION */
C51 COMPILER V9.60.7.0   U8G2_CIRCLE                                                       10/16/2024 15:44:13 PAGE 9   

 475   1        
 476   1        u8g2_draw_filled_ellipse(u8g2, x0, y0, rx, ry, option);
 477   1      }
 478          
 479          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2200    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     134
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
