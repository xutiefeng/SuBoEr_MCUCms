C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8X8_8X8
OBJECT MODULE PLACED IN .\Objects\u8x8_8x8.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8x8_8x8.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\Device
                    -\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8x8_8x8.lst) TABS(2) OBJECT(.
                    -\Objects\u8x8_8x8.obj)

line level    source

   1          /*
   2          
   3            u8x8_8x8.c
   4            
   5            font procedures, directly interfaces display procedures
   6            
   7            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8          
   9            Copyright (c) 2016, olikraus@gmail.com
  10            All rights reserved.
  11          
  12            Redistribution and use in source and binary forms, with or without modification, 
  13            are permitted provided that the following conditions are met:
  14          
  15            * Redistributions of source code must retain the above copyright notice, this list 
  16              of conditions and the following disclaimer.
  17              
  18            * Redistributions in binary form must reproduce the above copyright notice, this 
  19              list of conditions and the following disclaimer in the documentation and/or other 
  20              materials provided with the distribution.
  21          
  22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.    
  35          
  36          */
  37          
  38          #include "u8x8.h"
  39          
  40          #if defined(ESP8266)
              uint8_t u8x8_pgm_read_esp(const uint8_t * addr) 
              {
                  uint32_t bytes;
                  bytes = *(uint32_t*)((uint32_t)addr & ~3);
                  return ((uint8_t*)&bytes)[(uint32_t)addr & 3];
              }
              #endif
  48          
  49          
  50          void u8x8_SetFont(u8x8_t *u8x8, const uint8_t *font_8x8)
  51          {
  52   1        u8x8->font = font_8x8;
  53   1      }
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 2   

  54          
  55          /*
  56           Args:
  57             u8x8: ptr to u8x8 structure
  58             encoding: glyph for which the data is requested (must be between 0 and 255)
  59             buf: pointer to 8 bytes
  60          */
  61          static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf, uint8_t tile_offset) U8X8_NO
             -INLINE;
  62          static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf, uint8_t tile_offset) 
  63          {
  64   1        uint8_t first, last, tiles, i;
  65   1        uint16_t offset;
  66   1        first = u8x8_pgm_read(u8x8->font+0);
  67   1        last = u8x8_pgm_read(u8x8->font+1);
  68   1        tiles = u8x8_pgm_read(u8x8->font+2);    /* new 2019 format */
  69   1        tiles *= u8x8_pgm_read(u8x8->font+3); /* new 2019 format */
  70   1        
  71   1        /* get the glyph bitmap from the font */
  72   1        if ( first <= encoding && encoding <= last )
  73   1        {
  74   2          offset = encoding;
  75   2          offset -= first;
  76   2          offset *= tiles;    /* new 2019 format */
  77   2          offset += tile_offset;  /* new 2019 format */
  78   2          offset *= 8;
  79   2          offset +=4;     /* changed from 2 to 4, new 2019 format */
  80   2          for( i = 0; i < 8; i++ )
  81   2          {
  82   3            buf[i] = u8x8_pgm_read(u8x8->font+offset);
  83   3            offset++;
  84   3          }
  85   2        }
  86   1        else
  87   1        {
  88   2          for( i = 0; i < 8; i++ )
  89   2          {
  90   3            buf[i] = 0;
  91   3          }
  92   2        }
  93   1        
  94   1        /* invert the bitmap if required */
  95   1        if ( u8x8->is_font_inverse_mode )
  96   1        {
  97   2          for( i = 0; i < 8; i++ )
  98   2          {
  99   3            buf[i] ^= 255;
 100   3          }
 101   2        }
 102   1        
 103   1      }
 104          
 105          void u8x8_DrawGlyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
 106          {
 107   1        uint8_t th = u8x8_pgm_read(u8x8->font+2);   /* new 2019 format */
 108   1        uint8_t tv = u8x8_pgm_read(u8x8->font+3); /* new 2019 format */
 109   1        uint8_t xx, tile;
 110   1        uint8_t buf[8];
 111   1        th += x;
 112   1        tv += y;
 113   1        tile = 0;
 114   1        do
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 3   

 115   1        {
 116   2          xx = x;
 117   2          do
 118   2          {
 119   3            u8x8_get_glyph_data(u8x8, encoding, buf, tile);
 120   3            u8x8_DrawTile(u8x8, xx, y, 1, buf);
 121   3            tile++;
 122   3            xx++;
 123   3          } while( xx < th );
 124   2          y++;
 125   2        } while( y < tv );
 126   1      }
 127          
 128          
 129          /*
 130            Source: http://graphics.stanford.edu/~seander/bithacks.html
 131            Section: Interleave bits by Binary Magic Numbers 
 132             Original codes is here:
 133              static const unsigned int B[] = {0x55555555, 0x33333333, 0x0F0F0F0F, 0x00FF00FF};
 134              static const unsigned int S[] = {1, 2, 4, 8};
 135          
 136              unsigned int x; // Interleave lower 16 bits of x and y, so the bits of x
 137              unsigned int y; // are in the even positions and bits from y in the odd;
 138              unsigned int z; // z gets the resulting 32-bit Morton Number.  
 139                  // x and y must initially be less than 65536.
 140          
 141              x = (x | (x << S[3])) & B[3];
 142              x = (x | (x << S[2])) & B[2];
 143              x = (x | (x << S[1])) & B[1];
 144              x = (x | (x << S[0])) & B[0];
 145          
 146              y = (y | (y << S[3])) & B[3];
 147              y = (y | (y << S[2])) & B[2];
 148              y = (y | (y << S[1])) & B[1];
 149              y = (y | (y << S[0])) & B[0];
 150          
 151              z = x | (y << 1);
 152          */
 153          uint16_t u8x8_upscale_byte(uint8_t x) 
 154          {
 155   1        uint16_t y = x;
 156   1        y |= (y << 4);    // x = (x | (x << S[2])) & B[2];
 157   1        y &= 0x0f0f;
 158   1        y |= (y << 2);    // x = (x | (x << S[1])) & B[1];
 159   1        y &= 0x3333;
 160   1        y |= (y << 1);    // x = (x | (x << S[0])) & B[0];
 161   1        y &= 0x5555;
 162   1        
 163   1        y |= (y << 1);    // z = x | (y << 1);
 164   1        return y;
 165   1      }
 166          
 167          static void u8x8_upscale_buf(uint8_t *src, uint8_t *dest) U8X8_NOINLINE;
 168          static void u8x8_upscale_buf(uint8_t *src, uint8_t *dest)
 169          {
 170   1        uint8_t i = 4;  
 171   1        do 
 172   1        {
 173   2          *dest++ = *src;
 174   2          *dest++ = *src++;
 175   2          i--;
 176   2        } while( i > 0 );
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 4   

 177   1      }
 178          
 179          static void u8x8_draw_2x2_subglyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding, uint8_t tile)
 180          {
 181   1        uint8_t i;
 182   1        uint16_t t;
 183   1        uint8_t buf[8];
 184   1        uint8_t buf1[8];
 185   1        uint8_t buf2[8];
 186   1        u8x8_get_glyph_data(u8x8, encoding, buf, tile);
 187   1        for( i = 0; i < 8; i ++ )
 188   1        {
 189   2            t = u8x8_upscale_byte(buf[i]);
 190   2            buf1[i] = t >> 8;
 191   2            buf2[i] = t & 255;
 192   2        }
 193   1        u8x8_upscale_buf(buf2, buf);
 194   1        u8x8_DrawTile(u8x8, x, y, 1, buf);
 195   1        
 196   1        u8x8_upscale_buf(buf2+4, buf);
 197   1        u8x8_DrawTile(u8x8, x+1, y, 1, buf);
 198   1        
 199   1        u8x8_upscale_buf(buf1, buf);
 200   1        u8x8_DrawTile(u8x8, x, y+1, 1, buf);
 201   1        
 202   1        u8x8_upscale_buf(buf1+4, buf);
 203   1        u8x8_DrawTile(u8x8, x+1, y+1, 1, buf);  
 204   1      }
 205          
 206          
 207          void u8x8_Draw2x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
 208          {
 209   1        uint8_t th = u8x8_pgm_read(u8x8->font+2);   /* new 2019 format */
 210   1        uint8_t tv = u8x8_pgm_read(u8x8->font+3); /* new 2019 format */
 211   1        uint8_t xx, tile;
 212   1        th *= 2;
 213   1        th += x;
 214   1        tv *= 2;
 215   1        tv += y;
 216   1        tile = 0;
 217   1        do
 218   1        {
 219   2          xx = x;
 220   2          do
 221   2          {
 222   3            u8x8_draw_2x2_subglyph(u8x8, xx, y, encoding, tile);
 223   3            tile++;
 224   3            xx+=2;
 225   3          } while( xx < th );
 226   2          y+=2;
 227   2        } while( y < tv );  
 228   1      }
 229          
 230          /* https://github.com/olikraus/u8g2/issues/474 */
 231          static void u8x8_draw_1x2_subglyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding, uint8_t tile)
 232          {
 233   1        uint8_t i;
 234   1        uint16_t t;
 235   1        uint8_t buf[8];
 236   1        uint8_t buf1[8];
 237   1        uint8_t buf2[8];
 238   1        u8x8_get_glyph_data(u8x8, encoding, buf, tile);
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 5   

 239   1        for( i = 0; i < 8; i ++ )
 240   1        {
 241   2            t = u8x8_upscale_byte(buf[i]);
 242   2            buf1[i] = t >> 8;
 243   2            buf2[i] = t & 255;
 244   2        }
 245   1        u8x8_DrawTile(u8x8, x,   y, 1, buf2);
 246   1        u8x8_DrawTile(u8x8, x, y+1, 1, buf1);
 247   1      }
 248          
 249          void u8x8_Draw1x2Glyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
 250          {
 251   1        uint8_t th = u8x8_pgm_read(u8x8->font+2);   /* new 2019 format */
 252   1        uint8_t tv = u8x8_pgm_read(u8x8->font+3); /* new 2019 format */
 253   1        uint8_t xx, tile;
 254   1        th += x;
 255   1        tv *= 2;
 256   1        tv += y;
 257   1        tile = 0;
 258   1        do
 259   1        {
 260   2          xx = x;
 261   2          do
 262   2          {
 263   3            u8x8_draw_1x2_subglyph(u8x8, xx, y, encoding, tile);
 264   3            tile++;
 265   3            xx++;
 266   3          } while( xx < th );
 267   2          y+=2;
 268   2        } while( y < tv );  
 269   1      }
 270          
 271          /*
 272          source: https://en.wikipedia.org/wiki/UTF-8
 273          Bits  from    to      bytes Byte 1    Byte 2    Byte 3    Byte 4    Byte 5    Byte 6
 274            7   U+0000    U+007F    1     0xxxxxxx
 275          11  U+0080    U+07FF    2     110xxxxx  10xxxxxx
 276          16  U+0800    U+FFFF    3     1110xxxx  10xxxxxx  10xxxxxx
 277          21  U+10000   U+1FFFFF  4     11110xxx  10xxxxxx  10xxxxxx  10xxxxxx
 278          26  U+200000  U+3FFFFFF   5     111110xx  10xxxxxx  10xxxxxx  10xxxxxx  10xxxxxx
 279          31  U+4000000   U+7FFFFFFF  6     1111110x  10xxxxxx  10xxxxxx  10xxxxxx  10xxxxxx  10xxxxxx  
 280          
 281          
 282          */
 283          
 284          /* reset the internal state machine */
 285          void u8x8_utf8_init(u8x8_t *u8x8)
 286          {
 287   1        u8x8->utf8_state = 0; /* also reset during u8x8_SetupDefaults() */
 288   1      }
 289          
 290          uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
 291          {
 292   1        if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 293   1          return 0x0ffff; /* end of string detected*/
 294   1        return b;
 295   1      }
*** WARNING C280 IN LINE 290 OF ..\u8g2\u8x8_8x8.c: 'u8x8': unreferenced local variable
 296          
 297          /*
 298            pass a byte from an utf8 encoded string to the utf8 decoder state machine
 299            returns 
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 6   

 300              0x0fffe: no glyph, just continue
 301              0x0ffff: end of string
 302              anything else: The decoded encoding
 303          */
 304          uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
 305          {
 306   1        if ( b == 0 || b == '\n' )  /* '\n' terminates the string to support the string list procedures */
 307   1          return 0x0ffff; /* end of string detected, pending UTF8 is discarded */
 308   1        if ( u8x8->utf8_state == 0 )
 309   1        {
 310   2          if ( b >= 0xfc )  /* 6 byte sequence */
 311   2          {
 312   3            u8x8->utf8_state = 5;
 313   3            b &= 1;
 314   3          }
 315   2          else if ( b >= 0xf8 )
 316   2          {
 317   3            u8x8->utf8_state = 4;
 318   3            b &= 3;
 319   3          }
 320   2          else if ( b >= 0xf0 )
 321   2          {
 322   3            u8x8->utf8_state = 3;
 323   3            b &= 7;      
 324   3          }
 325   2          else if ( b >= 0xe0 )
 326   2          {
 327   3            u8x8->utf8_state = 2;
 328   3            b &= 15;
 329   3          }
 330   2          else if ( b >= 0xc0 )
 331   2          {
 332   3            u8x8->utf8_state = 1;
 333   3            b &= 0x01f;
 334   3          }
 335   2          else
 336   2          {
 337   3            /* do nothing, just use the value as encoding */
 338   3            return b;
 339   3          }
 340   2          u8x8->encoding = b;
 341   2          return 0x0fffe;
 342   2        }
 343   1        else
 344   1        {
 345   2          u8x8->utf8_state--;
 346   2          /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
 347   2          u8x8->encoding<<=6;
 348   2          b &= 0x03f;
 349   2          u8x8->encoding |= b;
 350   2          if ( u8x8->utf8_state != 0 )
 351   2            return 0x0fffe; /* nothing to do yet */
 352   2        }
 353   1        return u8x8->encoding;
 354   1      }
 355          
 356          
 357          
 358          static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
 359          static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 360          {
 361   1        uint16_t e;
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 7   

 362   1        uint8_t cnt = 0;
 363   1        uint8_t th = u8x8_pgm_read(u8x8->font+2);   /* new 2019 format */
 364   1      
 365   1        u8x8_utf8_init(u8x8);
 366   1        for(;;)
 367   1        {
 368   2          e = u8x8->next_cb(u8x8, (uint8_t)*s);
 369   2          if ( e == 0x0ffff )
 370   2            break;
 371   2          s++;
 372   2          if ( e != 0x0fffe )
 373   2          {
 374   3            u8x8_DrawGlyph(u8x8, x, y, e);
 375   3            x+=th;
 376   3            cnt++;
 377   3          }
 378   2        }
 379   1        return cnt;
 380   1      }
 381          
 382          
 383          uint8_t u8x8_DrawString(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 384          {
 385   1        u8x8->next_cb = u8x8_ascii_next;
 386   1        return u8x8_draw_string(u8x8, x, y, s);
 387   1      }
 388          
 389          uint8_t u8x8_DrawUTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 390          {
 391   1        u8x8->next_cb = u8x8_utf8_next;
 392   1        return u8x8_draw_string(u8x8, x, y, s);
 393   1      }
 394          
 395          
 396          
 397          static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
 398          static uint8_t u8x8_draw_2x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 399          {
 400   1        uint16_t e;
 401   1        uint8_t cnt = 0;
 402   1        uint8_t th = u8x8_pgm_read(u8x8->font+2); /* new 2019 format */
 403   1        
 404   1        th <<= 1;
 405   1        
 406   1        u8x8_utf8_init(u8x8);
 407   1        for(;;)
 408   1        {
 409   2          e = u8x8->next_cb(u8x8, (uint8_t)*s);
 410   2          if ( e == 0x0ffff )
 411   2            break;
 412   2          s++;
 413   2          if ( e != 0x0fffe )
 414   2          {
 415   3            u8x8_Draw2x2Glyph(u8x8, x, y, e);
 416   3            x+=th;
 417   3            cnt++;
 418   3          }
 419   2        }
 420   1        return cnt;
 421   1      }
 422          
 423          
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 8   

 424          uint8_t u8x8_Draw2x2String(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 425          {
 426   1        u8x8->next_cb = u8x8_ascii_next;
 427   1        return u8x8_draw_2x2_string(u8x8, x, y, s);
 428   1      }
 429          
 430          uint8_t u8x8_Draw2x2UTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 431          {
 432   1        u8x8->next_cb = u8x8_utf8_next;
 433   1        return u8x8_draw_2x2_string(u8x8, x, y, s);
 434   1      }
 435          
 436          
 437          
 438          static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
 439          static uint8_t u8x8_draw_1x2_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 440          {  
 441   1        uint16_t e;
 442   1        uint8_t cnt = 0;
 443   1        uint8_t th = u8x8_pgm_read(u8x8->font+2); /* new 2019 format */
 444   1        u8x8_utf8_init(u8x8);
 445   1        for(;;)
 446   1        {
 447   2          e = u8x8->next_cb(u8x8, (uint8_t)*s);
 448   2          if ( e == 0x0ffff )
 449   2            break;
 450   2          s++;
 451   2          if ( e != 0x0fffe )
 452   2          {
 453   3            u8x8_Draw1x2Glyph(u8x8, x, y, e);
 454   3            x+=th;
 455   3            cnt++;
 456   3          }
 457   2        }
 458   1        return cnt;
 459   1      }
 460          
 461          
 462          uint8_t u8x8_Draw1x2String(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 463          {
 464   1        u8x8->next_cb = u8x8_ascii_next;
 465   1        return u8x8_draw_1x2_string(u8x8, x, y, s);
 466   1      }
 467          
 468          uint8_t u8x8_Draw1x2UTF8(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
 469          {
 470   1        u8x8->next_cb = u8x8_utf8_next;
 471   1        return u8x8_draw_1x2_string(u8x8, x, y, s);
 472   1      }
 473          
 474          
 475          
 476          uint8_t u8x8_GetUTF8Len(u8x8_t *u8x8, const char *s)
 477          {
 478   1        uint16_t e;
 479   1        uint8_t cnt = 0;
 480   1        u8x8_utf8_init(u8x8);
 481   1        for(;;)
 482   1        {
 483   2          e = u8x8_utf8_next(u8x8, *s);
 484   2          if ( e == 0x0ffff )
 485   2            break;
C51 COMPILER V9.60.0.0   U8X8_8X8                                                          10/18/2024 17:39:16 PAGE 9   

 486   2          s++;
 487   2          if ( e != 0x0fffe )
 488   2            cnt++;
 489   2        }
 490   1        return cnt;
 491   1      }
 492          
 493          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2280    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     220
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
