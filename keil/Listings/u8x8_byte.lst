C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE U8X8_BYTE
OBJECT MODULE PLACED IN .\Objects\u8x8_byte.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\u8g2\u8x8_byte.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\Device\C
                    -MS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8x8_byte.lst) TABS(2) OBJECT(.\
                    -Objects\u8x8_byte.obj)

line level    source

   1          /*
   2          
   3            u8x8_byte.c 
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34            
  35          */
  36          
  37          #include "u8x8.h"
  38          
  39          uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
  40          {
  41   1        return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
*** ERROR C212 IN LINE 41 OF ..\u8g2\u8x8_byte.c: indirect call: parameters do not fit within registers
  42   1      }
  43          
  44          uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
*** ERROR C141 IN LINE 44 OF ..\u8g2\u8x8_byte.c: syntax error near ')', expected '<id>'
  45          {
*** ERROR C236 IN LINE 45 OF ..\u8g2\u8x8_byte.c: '_u8x8_byte_SendBytes': different length of parameter lists
  46   1        return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
*** ERROR C141 IN LINE 46 OF ..\u8g2\u8x8_byte.c: syntax error near 'data', expected 'sizeof'
  47   1      }
  48   1      
  49   1      uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 2   

  50   1      {
  51   1        return u8x8_byte_SendBytes(u8x8, 1, &byte);
  52   1      }
  53          
  54          uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
  55          {
  56   1        return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
  57   1      }
  58          
  59          uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
  60          {
  61   1        return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
  62   1      }
  63          
  64          /*=========================================*/
  65          
  66          uint8_t u8x8_byte_empty(U8X8_UNUSED u8x8_t *u8x8, uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED vo
             -id *arg_ptr)
  67          {
  68   1        switch(msg)
  69   1        {
  70   2          case U8X8_MSG_BYTE_SEND:
  71   2          case U8X8_MSG_BYTE_INIT:
  72   2          case U8X8_MSG_BYTE_SET_DC:
  73   2          case U8X8_MSG_BYTE_START_TRANSFER:
  74   2          case U8X8_MSG_BYTE_END_TRANSFER:
  75   2            break;  /* do nothing */
  76   2        }
  77   1        return 1; /* always succeed */
  78   1      }
  79          
  80          
  81          /*=========================================*/
  82          
  83          
  84          /*
  85            Uses:
  86              u8x8->display_info->sda_setup_time_ns
  87              u8x8->display_info->sck_pulse_width_ns
  88              u8x8->display_info->spi_mode
  89              u8x8->display_info->chip_disable_level
  90              u8x8->display_info->chip_enable_level
  91              u8x8->display_info->post_chip_enable_wait_ns
  92              u8x8->display_info->pre_chip_disable_wait_ns
  93            Calls to GPIO and DELAY:
  94              U8X8_MSG_DELAY_NANO
  95              U8X8_MSG_GPIO_DC
  96              U8X8_MSG_GPIO_CS
  97              U8X8_MSG_GPIO_CLOCK
  98              U8X8_MSG_GPIO_DATA
  99            Handles:
 100              U8X8_MSG_BYTE_INIT
 101              U8X8_MSG_BYTE_SEND
 102              U8X8_MSG_BYTE_SET_DC
 103              U8X8_MSG_BYTE_START_TRANSFER
 104              U8X8_MSG_BYTE_END_TRANSFER
 105          */
 106          
 107          uint8_t u8x8_byte_4wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 108          {
 109   1        uint8_t i, b;
 110   1        uint8_t *data;
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 3   

 111   1        uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 112   1        uint8_t not_takeover_edge = 1 - takeover_edge;
 113   1       
 114   1        switch(msg)
 115   1        {
 116   2          case U8X8_MSG_BYTE_SEND:
 117   2            data = (uint8_t *)arg_ptr;
 118   2            while( arg_int > 0 )
 119   2            {
 120   3        b = *data;
 121   3        data++;
 122   3        arg_int--;
 123   3        for( i = 0; i < 8; i++ )
 124   3        {
 125   4          if ( b & 128 )
 126   4            u8x8_gpio_SetSPIData(u8x8, 1);
 127   4          else
 128   4            u8x8_gpio_SetSPIData(u8x8, 0);
 129   4          b <<= 1;
 130   4          
 131   4          u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 132   4          u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 133   4          u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 134   4          u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 135   4        }    
 136   3            }
 137   2            break;
 138   2            
 139   2          case U8X8_MSG_BYTE_INIT:
 140   2            /* disable chipselect */
 141   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 142   2            /* no wait required here */
 143   2            
 144   2            /* for SPI: setup correct level of the clock signal */
 145   2            u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 146   2            break;
 147   2          case U8X8_MSG_BYTE_SET_DC:
 148   2            u8x8_gpio_SetDC(u8x8, arg_int);
 149   2            break;
 150   2          case U8X8_MSG_BYTE_START_TRANSFER:
 151   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 152   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NUL
             -L);
 153   2            break;
 154   2          case U8X8_MSG_BYTE_END_TRANSFER:
 155   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NUL
             -L);
 156   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 157   2            break;
 158   2          default:
 159   2            return 0;
 160   2        }
 161   1        return 1;
 162   1      }
 163          
 164          /*=========================================*/
 165          
 166          uint8_t u8x8_byte_8bit_6800mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 167          {
 168   1        uint8_t i, b;
 169   1        uint8_t *data;
 170   1       
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 4   

 171   1        switch(msg)
 172   1        {
 173   2          case U8X8_MSG_BYTE_SEND:
 174   2            data = (uint8_t *)arg_ptr;
 175   2            while( arg_int > 0 )
 176   2            {
 177   3        b = *data;
 178   3        data++;
 179   3        arg_int--;
 180   3        for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 181   3        {
 182   4          u8x8_gpio_call(u8x8, i, b&1);
 183   4          b >>= 1;
 184   4        }    
 185   3        
 186   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 187   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 188   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 189   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 190   3            }
 191   2            break;
 192   2            
 193   2          case U8X8_MSG_BYTE_INIT:
 194   2            /* disable chipselect */
 195   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 196   2            /* ensure that the enable signal is high */
 197   2            u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 198   2            break;
 199   2          case U8X8_MSG_BYTE_SET_DC:
 200   2            u8x8_gpio_SetDC(u8x8, arg_int);
 201   2            break;
 202   2          case U8X8_MSG_BYTE_START_TRANSFER:
 203   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 204   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NUL
             -L);
 205   2            break;
 206   2          case U8X8_MSG_BYTE_END_TRANSFER:
 207   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NUL
             -L);
 208   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 209   2            break;
 210   2          default:
 211   2            return 0;
 212   2        }
 213   1        return 1;
 214   1      }
 215          
 216          uint8_t u8x8_byte_8bit_8080mode(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 217          {
 218   1        uint8_t i, b;
 219   1        uint8_t *data;
 220   1       
 221   1        switch(msg)
 222   1        {
 223   2          case U8X8_MSG_BYTE_SEND:
 224   2            data = (uint8_t *)arg_ptr;
 225   2            while( arg_int > 0 )
 226   2            {
 227   3        b = *data;
 228   3        data++;
 229   3        arg_int--;
 230   3        for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 5   

 231   3        {
 232   4          u8x8_gpio_call(u8x8, i, b&1);
 233   4          b >>= 1;
 234   4        }    
 235   3        
 236   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 237   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 238   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 239   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 240   3            }
 241   2            break;
 242   2            
 243   2          case U8X8_MSG_BYTE_INIT:
 244   2            /* disable chipselect */
 245   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 246   2            /* ensure that the enable signal is high */
 247   2            u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 248   2            break;
 249   2          case U8X8_MSG_BYTE_SET_DC:
 250   2            u8x8_gpio_SetDC(u8x8, arg_int);
 251   2            break;
 252   2          case U8X8_MSG_BYTE_START_TRANSFER:
 253   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 254   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NUL
             -L);
 255   2            break;
 256   2          case U8X8_MSG_BYTE_END_TRANSFER:
 257   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NUL
             -L);
 258   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 259   2            break;
 260   2          default:
 261   2            return 0;
 262   2        }
 263   1        return 1;
 264   1      }
 265          
 266          /*=========================================*/
 267          
 268          uint8_t u8x8_byte_3wire_sw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 269          {
 270   1        uint8_t i;
 271   1        uint8_t *data;
 272   1        uint8_t takeover_edge = u8x8_GetSPIClockPhase(u8x8);
 273   1        uint8_t not_takeover_edge = 1 - takeover_edge;
 274   1        uint16_t b;
 275   1        static uint8_t last_dc;
 276   1       
 277   1        switch(msg)
 278   1        {
 279   2          case U8X8_MSG_BYTE_SEND:
 280   2            data = (uint8_t *)arg_ptr;
 281   2            while( arg_int > 0 )
 282   2            {
 283   3        b = *data;
 284   3        if ( last_dc != 0 )
 285   3          b |= 256;
 286   3        data++;
 287   3        arg_int--;
 288   3        for( i = 0; i < 9; i++ )
 289   3        {
 290   4          if ( b & 256 )
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 6   

 291   4            u8x8_gpio_SetSPIData(u8x8, 1);
 292   4          else
 293   4            u8x8_gpio_SetSPIData(u8x8, 0);
 294   4          b <<= 1;
 295   4          
 296   4          u8x8_gpio_SetSPIClock(u8x8, not_takeover_edge);
 297   4          u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sda_setup_time_ns);
 298   4          u8x8_gpio_SetSPIClock(u8x8, takeover_edge);
 299   4          u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->sck_pulse_width_ns);
 300   4        }    
 301   3            }
 302   2            break;
 303   2            
 304   2          case U8X8_MSG_BYTE_INIT:
 305   2            /* disable chipselect */
 306   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 307   2            /* no wait required here */
 308   2            
 309   2            /* for SPI: setup correct level of the clock signal */
 310   2            u8x8_gpio_SetSPIClock(u8x8, u8x8_GetSPIClockPhase(u8x8));
 311   2            break;
 312   2          case U8X8_MSG_BYTE_SET_DC:
 313   2            last_dc = arg_int;
 314   2            break;
 315   2          case U8X8_MSG_BYTE_START_TRANSFER:
 316   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_enable_level);  
 317   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NUL
             -L);
 318   2            break;
 319   2          case U8X8_MSG_BYTE_END_TRANSFER:
 320   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NUL
             -L);
 321   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);
 322   2            break;
 323   2          default:
 324   2            return 0;
 325   2        }
 326   1        return 1;
 327   1      }
 328          
 329          /*=========================================*/
 330          
 331          void u8x8_byte_set_ks0108_cs(u8x8_t *u8x8, uint8_t arg)
 332          {
 333   1        u8x8_gpio_SetCS(u8x8, arg&1);
 334   1        arg = arg >> 1;
 335   1        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS1, arg&1);
 336   1        arg = arg >> 1;
 337   1        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS2, arg&1);
 338   1      }
 339          
 340          /* 6800 mode */
 341          uint8_t u8x8_byte_ks0108(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 342          {
 343   1        uint8_t i, b;
 344   1        uint8_t *data;
 345   1       
 346   1        switch(msg)
 347   1        {
 348   2          case U8X8_MSG_BYTE_SEND:
 349   2            data = (uint8_t *)arg_ptr;
 350   2            while( arg_int > 0 )
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 7   

 351   2            {
 352   3        b = *data;
 353   3        data++;
 354   3        arg_int--;
 355   3        for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 356   3        {
 357   4          u8x8_gpio_call(u8x8, i, b&1);
 358   4          b >>= 1;
 359   4        }    
 360   3        
 361   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 362   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 1);
 363   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);
 364   3        u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 365   3            }
 366   2            break;
 367   2            
 368   2          case U8X8_MSG_BYTE_INIT:
 369   2            /* disable chipselect */
 370   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 371   2            /* ensure that the enable signal is low */
 372   2            u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 373   2            break;
 374   2          case U8X8_MSG_BYTE_SET_DC:
 375   2            u8x8_gpio_SetDC(u8x8, arg_int);
 376   2            break;
 377   2          case U8X8_MSG_BYTE_START_TRANSFER:
 378   2            /* expects 3 bits in arg_int for the chip select lines */ 
 379   2            u8x8_byte_set_ks0108_cs(u8x8, arg_int);
 380   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->post_chip_enable_wait_ns, NUL
             -L);
 381   2            break;
 382   2          case U8X8_MSG_BYTE_END_TRANSFER:
 383   2            u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->pre_chip_disable_wait_ns, NUL
             -L);
 384   2            u8x8_byte_set_ks0108_cs(u8x8, arg_int);
 385   2            break;
 386   2          default:
 387   2            return 0;
 388   2        }
 389   1        return 1;
 390   1      }
 391          
 392          
 393          /* sed1520 or sbn1661 
 394            U8X8_MSG_GPIO_E --> E1
 395            U8X8_MSG_GPIO_CS --> E2
 396          */
 397          uint8_t u8x8_byte_sed1520(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 398          {
 399   1        uint8_t i, b;
 400   1        uint8_t *data;
 401   1        static uint8_t enable_pin;
 402   1       
 403   1        switch(msg)
 404   1        {
 405   2          case U8X8_MSG_BYTE_SEND:
 406   2            data = (uint8_t *)arg_ptr;
 407   2            while( arg_int > 0 )
 408   2            {
 409   3        b = *data;
 410   3        data++;
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 8   

 411   3        arg_int--;
 412   3        for( i = U8X8_MSG_GPIO_D0; i <= U8X8_MSG_GPIO_D7; i++ )
 413   3        {
 414   4          u8x8_gpio_call(u8x8, i, b&1);
 415   4          b >>= 1;
 416   4        }    
 417   3        
 418   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->data_setup_time_ns);
 419   3        u8x8_gpio_call(u8x8, enable_pin, 1);
 420   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, 200);    /* KS0108 requires 450 ns, use 200 here */
 421   3        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_NANO, u8x8->display_info->write_pulse_width_ns);  /* expect 250 here
             - */
 422   3        u8x8_gpio_call(u8x8, enable_pin, 0);
 423   3            }
 424   2            break;
 425   2            
 426   2          case U8X8_MSG_BYTE_INIT:
 427   2            /* disable chipselect */
 428   2            u8x8_gpio_SetCS(u8x8, u8x8->display_info->chip_disable_level);    
 429   2            /* ensure that the enable signals are low */
 430   2            u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_E, 0);
 431   2            u8x8_gpio_call(u8x8, U8X8_MSG_GPIO_CS, 0);
 432   2            enable_pin = U8X8_MSG_GPIO_E;
 433   2            break;
 434   2          case U8X8_MSG_BYTE_SET_DC:
 435   2            u8x8_gpio_SetDC(u8x8, arg_int);
 436   2            break;
 437   2          case U8X8_MSG_BYTE_START_TRANSFER:
 438   2            /* cs lines are not supported for the SED1520/SBN1661 */
 439   2            /* instead, this will select the E1 or E2 line */ 
 440   2            enable_pin = U8X8_MSG_GPIO_E;
 441   2            if ( arg_int != 0 )
 442   2        enable_pin = U8X8_MSG_GPIO_CS;
 443   2            break;
 444   2          case U8X8_MSG_BYTE_END_TRANSFER:
 445   2            break;
 446   2          default:
 447   2            return 0;
 448   2        }
 449   1        return 1;
 450   1      }
 451          
 452          /*=========================================*/
 453          
 454          
 455          /*
 456            software i2c,
 457            ignores ACK response (which is anyway not provided by some displays)
 458            also does not allow reading from the device
 459          */
 460          static void i2c_delay(u8x8_t *u8x8) U8X8_NOINLINE;
 461          static void i2c_delay(u8x8_t *u8x8)
 462          {
 463   1        //u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_10MICRO, u8x8->display_info->i2c_bus_clock_100kHz);
 464   1        u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_I2C, u8x8->display_info->i2c_bus_clock_100kHz);
 465   1      }
 466          
 467          static void i2c_init(u8x8_t *u8x8)
 468          {
 469   1        u8x8_gpio_SetI2CClock(u8x8, 1);
 470   1        u8x8_gpio_SetI2CData(u8x8, 1);
 471   1        
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 9   

 472   1        i2c_delay(u8x8);
 473   1      }
 474          
 475          /* actually, the scl line is not observed, so this procedure does not return a value */
 476          
 477          static void i2c_read_scl_and_delay(u8x8_t *u8x8)
 478          {
 479   1        /* set as input (line will be high) */
 480   1        u8x8_gpio_SetI2CClock(u8x8, 1);
 481   1      
 482   1        i2c_delay(u8x8);
 483   1      }
 484          
 485          static void i2c_clear_scl(u8x8_t *u8x8)
 486          {
 487   1        u8x8_gpio_SetI2CClock(u8x8, 0);
 488   1      }
 489          
 490          static void i2c_read_sda(u8x8_t *u8x8)
 491          {
 492   1        /* set as input (line will be high) */
 493   1        u8x8_gpio_SetI2CData(u8x8, 1);
 494   1      }
 495          
 496          static void i2c_clear_sda(u8x8_t *u8x8)
 497          {
 498   1        /* set open collector and drive low */
 499   1        u8x8_gpio_SetI2CData(u8x8, 0);
 500   1      }
 501          
 502          static void i2c_start(u8x8_t *u8x8)
 503          {
 504   1        if ( u8x8->i2c_started != 0 )
 505   1        {
 506   2          /* if already started: do restart */
 507   2          i2c_read_sda(u8x8);     /* SDA = 1 */
 508   2          i2c_delay(u8x8);
 509   2          i2c_read_scl_and_delay(u8x8);
 510   2        }
 511   1        i2c_read_sda(u8x8);
 512   1        /* send the start condition, both lines go from 1 to 0 */
 513   1        i2c_clear_sda(u8x8);
 514   1        i2c_delay(u8x8);
 515   1        i2c_clear_scl(u8x8);
 516   1        u8x8->i2c_started = 1;
 517   1      }
 518          
 519          
 520          static void i2c_stop(u8x8_t *u8x8)
 521          {
 522   1        /* set SDA to 0 */
 523   1        i2c_clear_sda(u8x8);  
 524   1        i2c_delay(u8x8);
 525   1       
 526   1        /* now release all lines */
 527   1        i2c_read_scl_and_delay(u8x8);
 528   1       
 529   1        /* set SDA to 1 */
 530   1        i2c_read_sda(u8x8);
 531   1        i2c_delay(u8x8);
 532   1        u8x8->i2c_started = 0;
 533   1      }
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 10  

 534          
 535          static void i2c_write_bit(u8x8_t *u8x8, uint8_t val)
 536          {
 537   1        if (val)
 538   1          i2c_read_sda(u8x8);
 539   1        else
 540   1          i2c_clear_sda(u8x8);
 541   1       
 542   1        i2c_delay(u8x8);
 543   1        i2c_read_scl_and_delay(u8x8);
 544   1        i2c_clear_scl(u8x8);
 545   1      }
 546          
 547          static void i2c_read_bit(u8x8_t *u8x8)
 548          {
 549   1        //uint8_t val;
 550   1        /* do not drive SDA */
 551   1        i2c_read_sda(u8x8);
 552   1        i2c_delay(u8x8);
 553   1        i2c_read_scl_and_delay(u8x8);
 554   1        i2c_read_sda(u8x8);
 555   1        i2c_delay(u8x8);
 556   1        i2c_clear_scl(u8x8);
 557   1        //return val;
 558   1      }
 559          
 560          static void i2c_write_byte(u8x8_t *u8x8, uint8_t b)
 561          {
 562   1        i2c_write_bit(u8x8, b & 128);
 563   1        i2c_write_bit(u8x8, b & 64);
 564   1        i2c_write_bit(u8x8, b & 32);
 565   1        i2c_write_bit(u8x8, b & 16);
 566   1        i2c_write_bit(u8x8, b & 8);
 567   1        i2c_write_bit(u8x8, b & 4);
 568   1        i2c_write_bit(u8x8, b & 2);
 569   1        i2c_write_bit(u8x8, b & 1);
 570   1          
 571   1        /* read ack from client */
 572   1        /* 0: ack was given by client */
 573   1        /* 1: nothing happend during ack cycle */  
 574   1        i2c_read_bit(u8x8);
 575   1      }
 576          
 577          uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 578          {
 579   1        uint8_t *data;
 580   1      
 581   1        switch(msg)
 582   1        {
 583   2          case U8X8_MSG_BYTE_SEND:
 584   2            data = (uint8_t *)arg_ptr;
 585   2          
 586   2            while( arg_int > 0 )
 587   2            {
 588   3        i2c_write_byte(u8x8, *data);
 589   3        data++;
 590   3        arg_int--;
 591   3            }
 592   2            
 593   2            break;
 594   2            
 595   2          case U8X8_MSG_BYTE_INIT:
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 11  

 596   2            i2c_init(u8x8);
 597   2            break;
 598   2          case U8X8_MSG_BYTE_SET_DC:
 599   2            break;
 600   2          case U8X8_MSG_BYTE_START_TRANSFER:
 601   2            i2c_start(u8x8);
 602   2            i2c_write_byte(u8x8, u8x8_GetI2CAddress(u8x8));
 603   2            //i2c_write_byte(u8x8, 0x078);
 604   2            break;
 605   2          case U8X8_MSG_BYTE_END_TRANSFER:
 606   2            i2c_stop(u8x8);
 607   2            break;
 608   2          default:
 609   2            return 0;
 610   2        }
 611   1        return 1;
 612   1      }
 613          
 614          /*=========================================*/
 615          
 616          /* alternative i2c byte procedure */
 617          #ifdef ALTERNATIVE_I2C_BYTE_PROCEDURE
              
              
              void i2c_transfer(u8x8_t *u8x8, uint8_t adr, uint8_t cnt, uint8_t *data)
              {
                uint8_t i;
                i2c_start(u8x8);
                i2c_write_byte(u8x8, adr);
                for( i = 0; i < cnt; i++ )
                  i2c_write_byte(u8x8, data[i]);
                i2c_stop(u8x8);  
              }
              
              
              uint8_t u8x8_byte_sw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
              {
                static uint8_t buffer[32];    /* u8g2/u8x8 will never send more than 32 bytes */
                static uint8_t buf_idx;
                uint8_t *data;
               
                switch(msg)
                {
                  case U8X8_MSG_BYTE_SEND:
                    data = (uint8_t *)arg_ptr;      
                    while( arg_int > 0 )
                    {
                buffer[buf_idx++] = *data;
                data++;
                arg_int--;
                    }      
                    break;
                  case U8X8_MSG_BYTE_INIT:
                    i2c_init(u8x8);     /* init i2c communication */
                    break;
                  case U8X8_MSG_BYTE_SET_DC:
                    /* ignored for i2c */
                    break;
                  case U8X8_MSG_BYTE_START_TRANSFER:
                    buf_idx = 0;
                    break;
                  case U8X8_MSG_BYTE_END_TRANSFER:
C51 COMPILER V9.60.7.0   U8X8_BYTE                                                         10/16/2024 16:37:11 PAGE 12  

                    i2c_transfer(u8x8, u8x8_GetI2CAddress(u8x8), buf_idx, buffer);
                    break;
                  default:
                    return 0;
                }
                return 1;
              }
              
              #endif

C51 COMPILATION COMPLETE.  0 WARNING(S),  4 ERROR(S)
