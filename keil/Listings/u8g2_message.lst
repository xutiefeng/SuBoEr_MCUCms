C51 COMPILER V9.60.0.0   U8G2_MESSAGE                                                      10/18/2024 17:39:09 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8G2_MESSAGE
OBJECT MODULE PLACED IN .\Objects\u8g2_message.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8g2_message.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\De
                    -vice\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8g2_message.lst) TABS(2) 
                    -OBJECT(.\Objects\u8g2_message.obj)

line level    source

   1          /*
   2          
   3            u8g2_message.c
   4            
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2016, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          #include "u8g2.h"
  37          
  38          #define SPACE_BETWEEN_BUTTONS_IN_PIXEL 6
  39          #define SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL 3
  40          
  41          uint8_t u8g2_draw_button_line(u8g2_t *u8g2, u8g2_uint_t y, u8g2_uint_t w, uint8_t cursor, const char *s)
  42          {
  43   1        u8g2_uint_t button_line_width;
  44   1        
  45   1        uint8_t i;
  46   1        uint8_t cnt;
  47   1        uint8_t is_invert;
  48   1        
  49   1        u8g2_uint_t d;
  50   1        u8g2_uint_t x;
  51   1        
  52   1        cnt = u8x8_GetStringLineCnt(s);
  53   1        
C51 COMPILER V9.60.0.0   U8G2_MESSAGE                                                      10/18/2024 17:39:09 PAGE 2   

  54   1        
  55   1        /* calculate the width of the button line */
  56   1        button_line_width = 0;
  57   1        for( i = 0; i < cnt; i++ )
  58   1        {
  59   2          button_line_width += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
  60   2        }
  61   1        button_line_width += (cnt-1)*SPACE_BETWEEN_BUTTONS_IN_PIXEL;  /* add some space between the buttons */
  62   1        
  63   1        /* calculate the left offset */
  64   1        d = 0;
  65   1        if ( button_line_width < w )
  66   1        {
  67   2          d = w;
  68   2          d -= button_line_width;
  69   2          d /= 2;
  70   2        }
  71   1        
  72   1        /* draw the buttons */
  73   1        x = d;
  74   1        for( i = 0; i < cnt; i++ )
  75   1        {
  76   2          is_invert = 0;
  77   2          if ( i == cursor )
  78   2            is_invert = 1;
  79   2      
  80   2          u8g2_DrawUTF8Line(u8g2, x, y, 0, u8x8_GetStringLineStart(i, s), 1, is_invert);
  81   2          x += u8g2_GetUTF8Width(u8g2, u8x8_GetStringLineStart(i, s));
  82   2          x += SPACE_BETWEEN_BUTTONS_IN_PIXEL;
  83   2        }
  84   1        
  85   1        /* return the number of buttons */
  86   1        return cnt;
  87   1      }
  88          
  89          /*
  90            title1: Multiple lines,separated by '\n'
  91            title2: A single line/string which is terminated by '\0' or '\n' . "title2" accepts the return value fro
             -m u8x8_GetStringLineStart()
  92            title3: Multiple lines,separated by '\n'
  93            buttons:  one more more buttons separated by '\n' and terminated with '\0'
  94            side effects:
  95              u8g2_SetFontDirection(u8g2, 0);
  96              u8g2_SetFontPosBaseline(u8g2);
  97          */
  98          
  99          uint8_t u8g2_UserInterfaceMessage(u8g2_t *u8g2, const char *title1, const char *title2, const char *title3
             -, const char *buttons)
 100          {
 101   1        uint8_t height;
 102   1        uint8_t line_height;
 103   1        u8g2_uint_t pixel_height;
 104   1        u8g2_uint_t y, yy;
 105   1        
 106   1        uint8_t cursor = 0;
 107   1        uint8_t button_cnt;
 108   1        uint8_t event;
 109   1        
 110   1        /* only horizontal strings are supported, so force this here */
 111   1        u8g2_SetFontDirection(u8g2, 0);
 112   1      
 113   1        /* force baseline position */
C51 COMPILER V9.60.0.0   U8G2_MESSAGE                                                      10/18/2024 17:39:09 PAGE 3   

 114   1        u8g2_SetFontPosBaseline(u8g2);
 115   1        
 116   1        
 117   1        /* calculate line height */
 118   1        line_height = u8g2_GetAscent(u8g2);
 119   1        line_height -= u8g2_GetDescent(u8g2);
 120   1      
 121   1        /* calculate overall height of the message box in lines*/
 122   1        height = 1; /* button line */
 123   1        height += u8x8_GetStringLineCnt(title1);
 124   1        if ( title2 != NULL )
 125   1          height++;
 126   1        height += u8x8_GetStringLineCnt(title3);
 127   1        
 128   1        /* calculate the height in pixel */
 129   1        pixel_height = height;
 130   1        pixel_height *= line_height;
 131   1        
 132   1        /* ... and add the space between the text and the buttons */
 133   1        pixel_height +=SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 134   1        
 135   1        /* calculate offset from top */
 136   1        y = 0;
 137   1        if ( pixel_height < u8g2_GetDisplayHeight(u8g2)   )
 138   1        {
 139   2          y = u8g2_GetDisplayHeight(u8g2);
 140   2          y -= pixel_height;
 141   2          y /= 2;
 142   2        }
 143   1        y += u8g2_GetAscent(u8g2);
 144   1      
 145   1        
 146   1        for(;;)
 147   1        {
 148   2            u8g2_FirstPage(u8g2);
 149   2            do
 150   2            {
 151   3          yy = y;
 152   3          /* draw message box */
 153   3          
 154   3          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title1);
 155   3          if ( title2 != NULL )
 156   3          {
 157   4            u8g2_DrawUTF8Line(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), title2, 0, 0);
 158   4            yy+=line_height;
 159   4          }
 160   3          yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title3);
 161   3          yy += SPACE_BETWEEN_TEXT_AND_BUTTONS_IN_PIXEL;
 162   3      
 163   3          button_cnt = u8g2_draw_button_line(u8g2, yy, u8g2_GetDisplayWidth(u8g2), cursor, buttons);
 164   3          
 165   3            } while( u8g2_NextPage(u8g2) );
 166   2      
 167   2      #ifdef U8G2_REF_MAN_PIC
                    return 0;
              #endif
 170   2          
 171   2            for(;;)
 172   2            {
 173   3            event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 174   3            if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 175   3              return cursor+1;
C51 COMPILER V9.60.0.0   U8G2_MESSAGE                                                      10/18/2024 17:39:09 PAGE 4   

 176   3            else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 177   3              return 0;
 178   3            else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 179   3            {
 180   4              cursor++;
 181   4              if ( cursor >= button_cnt )
 182   4          cursor = 0;
 183   4              break;
 184   4            }
 185   3            else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 186   3            {
 187   4              if ( cursor == 0 )
 188   4          cursor = button_cnt;
 189   4              cursor--;
 190   4              break;
 191   4            }    
 192   3            }
 193   2        }
 194   1        /* never reached */
 195   1        //return 0;
 196   1      }
 197          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    620    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      36
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
