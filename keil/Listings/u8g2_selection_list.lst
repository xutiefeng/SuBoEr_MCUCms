C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8G2_SELECTION_LIST
OBJECT MODULE PLACED IN .\Objects\u8g2_selection_list.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8g2_selection_list.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Li
                    -bary\Device\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8g2_selection_list
                    -.lst) TABS(2) OBJECT(.\Objects\u8g2_selection_list.obj)

line level    source

   1          /*
   2          
   3            u8g2_selection_list.c
   4            
   5            selection list with scroll option
   6            
   7            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8          
   9            Copyright (c) 2016, olikraus@gmail.com
  10            All rights reserved.
  11          
  12            Redistribution and use in source and binary forms, with or without modification, 
  13            are permitted provided that the following conditions are met:
  14          
  15            * Redistributions of source code must retain the above copyright notice, this list 
  16              of conditions and the following disclaimer.
  17              
  18            * Redistributions in binary form must reproduce the above copyright notice, this 
  19              list of conditions and the following disclaimer in the documentation and/or other 
  20              materials provided with the distribution.
  21          
  22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35            
  36          */
  37          
  38          #include "u8g2.h"
  39          
  40          #define MY_BORDER_SIZE 1
  41          
  42          
  43          /*
  44            Draw a string at x,y
  45            Center string within w (left adjust if w < pixel len of s)
  46            
  47            Side effects:
  48              u8g2_SetFontDirection(u8g2, 0);
  49              u8g2_SetFontPosBaseline(u8g2);
  50          
  51          */
  52          void u8g2_DrawUTF8Line(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, const char *s, uint8_t b
             -order_size, uint8_t is_invert)
C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 2   

  53          {
  54   1        u8g2_uint_t d, str_width;
  55   1        u8g2_uint_t fx, fy, fw, fh;
  56   1      
  57   1        /* only horizontal strings are supported, so force this here */
  58   1        u8g2_SetFontDirection(u8g2, 0);
  59   1      
  60   1        /* revert y position back to baseline ref */
  61   1        y += u8g2->font_calc_vref(u8g2);   
  62   1      
  63   1        /* calculate the width of the string in pixel */
  64   1        str_width = u8g2_GetUTF8Width(u8g2, s);
  65   1      
  66   1        /* calculate delta d within the box */
  67   1        d = 0;
  68   1        if ( str_width < w )
  69   1        {
  70   2          d = w;
  71   2          d -=str_width;
  72   2          d /= 2;
  73   2        }
  74   1        else
  75   1        {
  76   2          w = str_width;
  77   2        }
  78   1      
  79   1        /* caluclate text box */
  80   1        fx = x;
  81   1        fy = y - u8g2_GetAscent(u8g2) ;
  82   1        fw = w;
  83   1        fh = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2) ;
  84   1      
  85   1        /* draw the box, if inverted */
  86   1        u8g2_SetDrawColor(u8g2, 1);
  87   1        if ( is_invert )
  88   1        {
  89   2          u8g2_DrawBox(u8g2, fx, fy, fw, fh);
  90   2        }
  91   1      
  92   1        /* draw the frame */
  93   1        while( border_size > 0 )
  94   1        {
  95   2          fx--;
  96   2          fy--;
  97   2          fw +=2;
  98   2          fh +=2;
  99   2          u8g2_DrawFrame(u8g2, fx, fy, fw, fh );
 100   2          border_size--;
 101   2        }
 102   1      
 103   1        if ( is_invert )
 104   1        {
 105   2          u8g2_SetDrawColor(u8g2, 0);
 106   2        }
 107   1        else
 108   1        {
 109   2          u8g2_SetDrawColor(u8g2, 1);
 110   2        }
 111   1      
 112   1        /* draw the text */
 113   1        u8g2_DrawUTF8(u8g2, x+d, y, s);
 114   1      
C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 3   

 115   1        /* revert draw color */
 116   1        u8g2_SetDrawColor(u8g2, 1);
 117   1      
 118   1      }
 119          
 120          
 121          /*
 122            draw several lines at position x,y.
 123            lines are stored in s and must be separated with '\n'.
 124            lines can be centered with respect to "w"
 125            if s == NULL nothing is drawn and 0 is returned
 126            returns the number of lines in s multiplied with line_height
 127          */
 128          u8g2_uint_t u8g2_DrawUTF8Lines(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t line
             -_height, const char *s)
 129          {
 130   1        uint8_t i;
 131   1        uint8_t cnt;
 132   1        u8g2_uint_t yy = 0;
 133   1        cnt = u8x8_GetStringLineCnt(s);
 134   1        //printf("str=%s\n", s);
 135   1        //printf("cnt=%d, y=%d, line_height=%d\n", cnt, y, line_height);
 136   1        for( i = 0; i < cnt; i++ )
 137   1        {
 138   2          //printf("  i=%d, y=%d, line_height=%d\n", i, y, line_height);
 139   2          u8g2_DrawUTF8Line(u8g2, x, y, w, u8x8_GetStringLineStart(i, s), 0, 0);
 140   2          y+=line_height;
 141   2          yy+=line_height;
 142   2        }
 143   1        return yy;
 144   1      }
 145          
 146          /*
 147            selection list with string line
 148            returns line height
 149          */
 150          static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, c
             -onst char *s) U8G2_NOINLINE;
 151          static u8g2_uint_t u8g2_draw_selection_list_line(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, uint8_t idx, c
             -onst char *s)
 152          {
 153   1        //u8g2_uint_t yy;
 154   1        uint8_t border_size = 0;
 155   1        uint8_t is_invert = 0;
 156   1        
 157   1        u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 158   1      
 159   1        /* calculate offset from display upper border */
 160   1        //yy = idx;
 161   1        //yy -= u8sl->first_pos;
 162   1        //yy *= line_height;
 163   1        //yy += y;
 164   1      
 165   1        /* check whether this is the current cursor line */
 166   1        if ( idx == u8sl->current_pos )
 167   1        {
 168   2          border_size = MY_BORDER_SIZE;
 169   2          is_invert = 1;
 170   2        }
 171   1      
 172   1        /* get the line from the array */
 173   1        s = u8x8_GetStringLineStart(idx, s);
C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 4   

 174   1      
 175   1        /* draw the line */
 176   1        if ( s == NULL )
 177   1          s = "";
 178   1        u8g2_DrawUTF8Line(u8g2, MY_BORDER_SIZE, y, u8g2_GetDisplayWidth(u8g2)-2*MY_BORDER_SIZE, s, border_size, 
             -is_invert);
 179   1        return line_height;
 180   1      }
 181          
 182          void u8g2_DrawSelectionList(u8g2_t *u8g2, u8sl_t *u8sl, u8g2_uint_t y, const char *s)
 183          {
 184   1        uint8_t i;
 185   1        for( i = 0; i < u8sl->visible; i++ )
 186   1        {
 187   2          y += u8g2_draw_selection_list_line(u8g2, u8sl, y, i+u8sl->first_pos, s);
 188   2        }
 189   1      }
 190          
 191          
 192          /*
 193            title:    NULL for no title, valid str for title line. Can contain mutliple lines, separated by '\n'
 194            start_pos:  default position for the cursor, first line is 1.
 195            sl:     string list (list of strings separated by \n)
 196            returns 0 if user has pressed the home key
 197            returns the selected line if user has pressed the select key
 198            side effects:
 199              u8g2_SetFontDirection(u8g2, 0);
 200              u8g2_SetFontPosBaseline(u8g2);
 201            
 202          */
 203          uint8_t u8g2_UserInterfaceSelectionList(u8g2_t *u8g2, const char *title, uint8_t start_pos, const char *sl
             -)
 204          {
 205   1        u8sl_t u8sl;
 206   1        u8g2_uint_t yy;
 207   1      
 208   1        uint8_t event;
 209   1      
 210   1        u8g2_uint_t line_height = u8g2_GetAscent(u8g2) - u8g2_GetDescent(u8g2)+MY_BORDER_SIZE;
 211   1      
 212   1        uint8_t title_lines = u8x8_GetStringLineCnt(title);
 213   1        uint8_t display_lines;
 214   1      
 215   1        
 216   1        if ( start_pos > 0 )  /* issue 112 */
 217   1          start_pos--;    /* issue 112 */
 218   1      
 219   1      
 220   1        if ( title_lines > 0 )
 221   1        {
 222   2        display_lines = (u8g2_GetDisplayHeight(u8g2)-3) / line_height;
 223   2        u8sl.visible = display_lines;
 224   2        u8sl.visible -= title_lines;
 225   2        }
 226   1        else
 227   1        {
 228   2        display_lines = u8g2_GetDisplayHeight(u8g2) / line_height;
 229   2        u8sl.visible = display_lines;
 230   2        }
 231   1      
 232   1        u8sl.total = u8x8_GetStringLineCnt(sl);
 233   1        u8sl.first_pos = 0;
C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 5   

 234   1        u8sl.current_pos = start_pos;
 235   1      
 236   1        if ( u8sl.current_pos >= u8sl.total )
 237   1          u8sl.current_pos = u8sl.total-1;
 238   1        if ( u8sl.first_pos+u8sl.visible <= u8sl.current_pos )
 239   1          u8sl.first_pos = u8sl.current_pos-u8sl.visible+1;
 240   1      
 241   1        u8g2_SetFontPosBaseline(u8g2);
 242   1        
 243   1        for(;;)
 244   1        {
 245   2            u8g2_FirstPage(u8g2);
 246   2            do
 247   2            {
 248   3              yy = u8g2_GetAscent(u8g2);
 249   3              if ( title_lines > 0 )
 250   3              {
 251   4                yy += u8g2_DrawUTF8Lines(u8g2, 0, yy, u8g2_GetDisplayWidth(u8g2), line_height, title);
 252   4          
 253   4          u8g2_DrawHLine(u8g2, 0, yy-line_height- u8g2_GetDescent(u8g2) + 1, u8g2_GetDisplayWidth(u8g2));
 254   4          
 255   4          yy += 3;
 256   4              }
 257   3              u8g2_DrawSelectionList(u8g2, &u8sl, yy, sl);
 258   3            } while( u8g2_NextPage(u8g2) );
 259   2            
 260   2      #ifdef U8G2_REF_MAN_PIC
                    return 0;
              #endif
 263   2      
 264   2      
 265   2            for(;;)
 266   2            {
 267   3              event = u8x8_GetMenuEvent(u8g2_GetU8x8(u8g2));
 268   3              if ( event == U8X8_MSG_GPIO_MENU_SELECT )
 269   3                return u8sl.current_pos+1;    /* +1, issue 112 */
 270   3              else if ( event == U8X8_MSG_GPIO_MENU_HOME )
 271   3                return 0;       /* issue 112: return 0 instead of start_pos */
 272   3              else if ( event == U8X8_MSG_GPIO_MENU_NEXT || event == U8X8_MSG_GPIO_MENU_DOWN )
 273   3              {
 274   4                u8sl_Next(&u8sl);
 275   4                break;
 276   4              }
 277   3              else if ( event == U8X8_MSG_GPIO_MENU_PREV || event == U8X8_MSG_GPIO_MENU_UP )
 278   3              {
 279   4                u8sl_Prev(&u8sl);
 280   4                break;
 281   4              }
 282   3            }
 283   2        }
 284   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    956    ----
   CONSTANT SIZE    =      1    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      75
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   U8G2_SELECTION_LIST                                               10/18/2024 17:39:11 PAGE 6   

   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
