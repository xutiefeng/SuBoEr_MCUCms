C51 COMPILER V9.60.0.0   U8G2_INTERSECTION                                                 10/18/2024 17:39:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8G2_INTERSECTION
OBJECT MODULE PLACED IN .\Objects\u8g2_intersection.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8g2_intersection.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Liba
                    -ry\Device\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8g2_intersection.lst
                    -) TABS(2) OBJECT(.\Objects\u8g2_intersection.obj)

line level    source

   1          /*
   2          
   3            u8g2_intersection.c 
   4            
   5            Intersection calculation, code taken from u8g_clip.c
   6          
   7            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8          
   9            Copyright (c) 2016, olikraus@gmail.com
  10            All rights reserved.
  11          
  12            Redistribution and use in source and binary forms, with or without modification, 
  13            are permitted provided that the following conditions are met:
  14          
  15            * Redistributions of source code must retain the above copyright notice, this list 
  16              of conditions and the following disclaimer.
  17              
  18            * Redistributions in binary form must reproduce the above copyright notice, this 
  19              list of conditions and the following disclaimer in the documentation and/or other 
  20              materials provided with the distribution.
  21          
  22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35          
  36          */
  37          
  38          #include "u8g2.h"
  39          
  40          #ifdef __GNUC__
              #define U8G2_ALWAYS_INLINE __inline__ __attribute__((always_inline))
              #else
  43          #define U8G2_ALWAYS_INLINE
  44          #endif 
  45          
  46          
  47          #if defined(U8G2_WITH_INTERSECTION) || defined(U8G2_WITH_CLIP_WINDOW_SUPPORT)
  48          
  49          #ifdef OLD_VERSION_WITH_SYMETRIC_BOUNDARIES
              
              /*
                intersection assumptions:
                  a1 <= a2 is always true    
C51 COMPILER V9.60.0.0   U8G2_INTERSECTION                                                 10/18/2024 17:39:05 PAGE 2   

                  
                  minimized version
                  ---1----0 1             b1 <= a2 && b1 > b2
                  -----1--0 1             b2 >= a1 && b1 > b2
                  ---1-1--- 1             b1 <= a2 && b2 >= a1
                */
              
              
              /*
                calculate the intersection between a0/a1 and v0/v1
                The intersection check returns one if the range of a0/a1 has an intersection with v0/v1.
                The intersection check includes the boundary values v1 and a1.
              
                The following asserts will succeed:
                  assert( u8g2_is_intersection_decision_tree(4, 6, 7, 9) == 0 );
                  assert( u8g2_is_intersection_decision_tree(4, 6, 6, 9) != 0 );
                  assert( u8g2_is_intersection_decision_tree(6, 9, 4, 6) != 0 );
                  assert( u8g2_is_intersection_decision_tree(7, 9, 4, 6) == 0 );  
              */
              
              //static uint8_t U8G2_ALWAYS_INLINE u8g2_is_intersection_decision_tree(u8g_uint_t a0, u8g_uint_t a1, u8g_u
             -int_t v0, u8g_uint_t v1) 
              static uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uin
             -t_t v1) 
              {
                if ( v0 <= a1 )
                {
                  if ( v1 >= a0 )
                  {
                    return 1;
                  }
                  else
                  {
                    if ( v0 > v1 )
                    {
                return 1;
                    }
                    else
                    {
                return 0;
                    }
                  }
                }
                else
                {
                  if ( v1 >= a0 )
                  {
                    if ( v0 > v1 )
                    {
                return 1;
                    }
                    else
                    {
                return 0;
                    }
                  }
                  else
                  {
                    return 0;
                  }
                }
              }
C51 COMPILER V9.60.0.0   U8G2_INTERSECTION                                                 10/18/2024 17:39:05 PAGE 3   

              
              #endif  /* OLD_VERSION_WITH_SYMETRIC_BOUNDARIES */
 116          
 117          
 118          /*
 119            version with asymetric boundaries.
 120            a1 and v1 are excluded
 121            v0 == v1 is not support end return 1
 122          */
 123          uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
 124          {
 125   1        if ( v0 < a1 )    // v0 <= a1
 126   1        {
 127   2          if ( v1 > a0 )  // v1 >= a0
 128   2          {
 129   3            return 1;
 130   3          }
 131   2          else
 132   2          {
 133   3            if ( v0 > v1 )  // v0 > v1
 134   3            {
 135   4        return 1;
 136   4            }
 137   3            else
 138   3            {
 139   4        return 0;
 140   4            }
 141   3          }
 142   2        }
 143   1        else
 144   1        {
 145   2          if ( v1 > a0 )  // v1 >= a0
 146   2          {
 147   3            if ( v0 > v1 )  // v0 > v1
 148   3            {
 149   4        return 1;
 150   4            }
 151   3            else
 152   3            {
 153   4        return 0;
 154   4            }
 155   3          }
 156   2          else
 157   2          {
 158   3            return 0;
 159   3          }
 160   2        }
 161   1      }
 162          
 163          
 164          
 165          /* upper limits are not included (asymetric boundaries) */
 166          uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
 167          {
 168   1        if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 169   1          return 0; 
 170   1        
 171   1        return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 172   1      }
 173          
 174          
 175          #endif /* U8G2_WITH_INTERSECTION */
C51 COMPILER V9.60.0.0   U8G2_INTERSECTION                                                 10/18/2024 17:39:05 PAGE 4   

 176          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    108    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      11
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
