C51 COMPILER V9.60.0.0   U8X8_CAPTURE                                                      10/18/2024 17:39:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8X8_CAPTURE
OBJECT MODULE PLACED IN .\Objects\u8x8_capture.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8x8_capture.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\De
                    -vice\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8x8_capture.lst) TABS(2) 
                    -OBJECT(.\Objects\u8x8_capture.obj)

line level    source

   1          /*
   2          
   3            u8x8_capture.c
   4            
   5            Screen capture funcion
   6            
   7            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8          
   9            Copyright (c) 2016, olikraus@gmail.com
  10            All rights reserved.
  11          
  12            Redistribution and use in source and binary forms, with or without modification, 
  13            are permitted provided that the following conditions are met:
  14          
  15            * Redistributions of source code must retain the above copyright notice, this list 
  16              of conditions and the following disclaimer.
  17              
  18            * Redistributions in binary form must reproduce the above copyright notice, this 
  19              list of conditions and the following disclaimer in the documentation and/or other 
  20              materials provided with the distribution.
  21          
  22            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  34            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35          
  36          
  37          */
  38          
  39          #include "u8x8.h"
  40          
  41          /*========================================================*/
  42          
  43          
  44          /* vertical top lsb memory architecture */
  45          uint8_t u8x8_capture_get_pixel_1(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)
  46          {
  47   1        //uint8_t *dest_ptr = capture->buffer;
  48   1        //if ( dest_ptr == NULL )
  49   1          //return 0;
  50   1        //dest_ptr += (y/8)*capture->tile_width*8;
  51   1        dest_ptr += (y/8)*tile_width*8;
  52   1        y &= 7;
  53   1        dest_ptr += x;
C51 COMPILER V9.60.0.0   U8X8_CAPTURE                                                      10/18/2024 17:39:18 PAGE 2   

  54   1        if ( (*dest_ptr & (1<<y)) == 0 )
  55   1          return 0;
  56   1        return 1;
  57   1      }
  58          
  59          /* horizontal right lsb memory architecture */
  60          /* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
  61          uint8_t u8x8_capture_get_pixel_2(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width)
  62          {
  63   1        //uint8_t *dest_ptr = capture->buffer;
  64   1        //if ( dest_ptr == NULL )
  65   1        //  return 0;
  66   1        //dest_ptr += y*capture->tile_width;
  67   1        y *= tile_width;
  68   1        dest_ptr += y;
  69   1        dest_ptr += x>>3;
  70   1        if ( (*dest_ptr & (128>>(x&7))) == 0 )
  71   1          return 0;
  72   1        return 1;
  73   1      }
  74          
  75          void u8x8_capture_write_pbm_pre(uint8_t tile_width, uint8_t tile_height, void (*out)(const char *s))
  76          {
  77   1        out("P1\n");
  78   1        out(u8x8_utoa((uint16_t)tile_width*8));
  79   1        out("\n");
  80   1        out(u8x8_utoa((uint16_t)tile_height*8));
  81   1        out("\n");
  82   1      }
  83          
  84          
  85          void u8x8_capture_write_pbm_buffer(uint8_t *buffer, uint8_t tile_width, uint8_t tile_height, uint8_t (*get
             -_pixel)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width), void (*out)(const char *s))
  86          {
  87   1        uint16_t x, y;
  88   1        uint16_t w, h;
  89   1      
  90   1        w = tile_width;
  91   1        w *= 8;
  92   1        h = tile_height;
  93   1        h *= 8;
  94   1          
  95   1        for( y = 0; y < h; y++)
  96   1        {
  97   2          for( x = 0; x < w; x++)
  98   2          {
  99   3            if ( get_pixel(x, y, buffer, tile_width) )
*** ERROR C212 IN LINE 99 OF ..\u8g2\u8x8_capture.c: indirect call: parameters do not fit within registers
 100   3        out("1");
 101   3            else
 102   3        out("0");     
 103   3          }
 104   2          out("\n");
 105   2        }
 106   1      }
 107          
 108          
 109          
 110          
 111          void u8x8_capture_write_xbm_pre(uint8_t tile_width, uint8_t tile_height, void (*out)(const char *s))
 112          {
 113   1        out("#define xbm_width ");
C51 COMPILER V9.60.0.0   U8X8_CAPTURE                                                      10/18/2024 17:39:18 PAGE 3   

 114   1        out(u8x8_utoa((uint16_t)tile_width*8));
 115   1        out("\n");
 116   1        out("#define xbm_height ");
 117   1        out(u8x8_utoa((uint16_t)tile_height*8));
 118   1        out("\n");  
 119   1        out("static unsigned char xbm_bits[] = {\n");  
 120   1      }
 121          
 122          void u8x8_capture_write_xbm_buffer(uint8_t *buffer, uint8_t tile_width, uint8_t tile_height, uint8_t (*get
             -_pixel)(uint16_t x, uint16_t y, uint8_t *dest_ptr, uint8_t tile_width), void (*out)(const char *s))
 123          {
 124   1        uint16_t x, y;
 125   1        uint16_t w, h;
 126   1        uint8_t v, b;
 127   1        char s[2];
 128   1        s[1] = '\0';
 129   1      
 130   1        w = tile_width;
 131   1        w *= 8;
 132   1        h = tile_height;
 133   1        h *= 8;
 134   1      
 135   1        y = 0;
 136   1        for(;;)
 137   1        {
 138   2          x = 0;
 139   2          for(;;)
 140   2          {
 141   3            v = 0;
 142   3            for( b = 0; b < 8; b++ )
 143   3            {
 144   4        v <<= 1;
 145   4        if ( get_pixel(x+7-b, y, buffer, tile_width) )
*** ERROR C212 IN LINE 145 OF ..\u8g2\u8x8_capture.c: indirect call: parameters do not fit within registers
 146   4          v |= 1;
 147   4            }
 148   3            out("0x");
 149   3            s[0] = (v>>4);
 150   3            if ( s[0] <= 9 )
 151   3        s[0] += '0';
 152   3            else
 153   3        s[0] += 'a'-10;
 154   3            out(s);
 155   3            s[0] = (v&15);
 156   3            if ( s[0] <= 9 )
 157   3        s[0] += '0';
 158   3            else
 159   3        s[0] += 'a'-10;
 160   3            out(s);
 161   3            x += 8;
 162   3            if ( x >= w )
 163   3        break;
 164   3            out(",");
 165   3          }
 166   2          y++;
 167   2          if ( y >= h )
 168   2            break;
 169   2          out(",");
 170   2          out("\n");
 171   2        }
 172   1        out("};\n");
 173   1        
C51 COMPILER V9.60.0.0   U8X8_CAPTURE                                                      10/18/2024 17:39:18 PAGE 4   

 174   1      }
 175          
 176          
 177          
 178          /*========================================================*/
 179          
 180          #ifdef NOT_YET_IMPLEMENTED_U8X8_SCREEN_CAPTURE
              
              struct _u8x8_capture_struct
              {
                u8x8_msg_cb old_cb;
                uint8_t *buffer;  /* tile_width*tile_height*8 bytes */
                uint8_t tile_width;
                uint8_t tile_height;
              };
              typedef struct _u8x8_capture_struct u8x8_capture_t;
              
              
              u8x8_capture_t u8x8_capture;
              
              
              static void u8x8_capture_memory_copy(uint8_t *dest, uint8_t *src, uint16_t cnt)
              {
                while( cnt > 0 )
                {
                  *dest++ = *src++;
                  cnt--;
                }
              }
              
              static void u8x8_capture_DrawTiles(u8x8_capture_t *capture, uint8_t tx, uint8_t ty, uint8_t tile_cnt, uint
             -8_t *tile_ptr)
              {
                uint8_t *dest_ptr = capture->buffer;
                //printf("tile pos: %d %d, cnt=%d\n", tx, ty, tile_cnt);
                if ( dest_ptr == NULL )
                  return;
                dest_ptr += (uint16_t)ty*capture->tile_width*8;
                dest_ptr += (uint16_t)tx*8;
                u8x8_capture_memory_copy(dest_ptr, tile_ptr, tile_cnt*8);
              }
              
              uint8_t u8x8_d_capture(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
              {
                if (  msg ==  U8X8_MSG_DISPLAY_DRAW_TILE )
                {
                  uint8_t x, y, c;
                  uint8_t *ptr;
                  x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
                  y = ((u8x8_tile_t *)arg_ptr)->y_pos;
                  c = ((u8x8_tile_t *)arg_ptr)->cnt;
                  ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
                  do
                  {
                    u8x8_capture_DrawTiles(&u8x8_capture, x, y, c, ptr);
                    x += c;
                    arg_int--;
                  } while( arg_int > 0 );
                }
                return u8x8_capture.old_cb(u8x8, msg, arg_int, arg_ptr);
              }
              
C51 COMPILER V9.60.0.0   U8X8_CAPTURE                                                      10/18/2024 17:39:18 PAGE 5   

              uint8_t u8x8_GetCaptureMemoryPixel(u8x8_t *u8x8, uint16_t x, uint16_t y)
              {
                return u8x8_capture_GetPixel(&u8x8_capture, x, y);
              }
              
              /* memory: tile_width*tile_height*8 bytes */
              void u8x8_ConnectCapture(u8x8_t *u8x8, uint8_t tile_width, uint8_t tile_height, uint8_t *memory)
              {
                if ( u8x8->display_cb == u8x8_d_capture )
                  return; /* do nothing, capture already installed */
              
                u8x8_capture.buffer = memory; /* tile_width*tile_height*8 bytes */
                u8x8_capture.tile_width = tile_width;
                u8x8_capture.tile_height = tile_height;
                u8x8_capture.old_cb = u8x8->display_cb;
                u8x8->display_cb = u8x8_d_capture;
                return;
              }
              
              #endif

C51 COMPILATION COMPLETE.  0 WARNING(S),  2 ERROR(S)
