C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE U8X8_D_SSD1309
OBJECT MODULE PLACED IN .\Objects\u8x8_d_ssd1309.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\u8g2\u8x8_d_ssd1309.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\
                    -Device\CMS8S6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8x8_d_ssd1309.lst) TABS
                    -(2) OBJECT(.\Objects\u8x8_d_ssd1309.obj)

line level    source

   1          /*
   2          
   3            u8x8_d_ssd1309.c
   4          
   5            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6          
   7            Copyright (c) 2017, olikraus@gmail.com
   8            All rights reserved.
   9          
  10            Redistribution and use in source and binary forms, with or without modification, 
  11            are permitted provided that the following conditions are met:
  12          
  13            * Redistributions of source code must retain the above copyright notice, this list 
  14              of conditions and the following disclaimer.
  15              
  16            * Redistributions in binary form must reproduce the above copyright notice, this 
  17              list of conditions and the following disclaimer in the documentation and/or other 
  18              materials provided with the distribution.
  19          
  20            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33            
  34          */
  35          
  36          
  37          #include "u8x8.h"
  38          
  39          
  40          
  41          
  42          static const uint8_t u8x8_d_ssd1309_powersave0_seq[] = {
  43            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  44            U8X8_C(0x0af),                    /* display on */
  45            U8X8_END_TRANSFER(),              /* disable chip */
  46            U8X8_END()                  /* end of sequence */
  47          };
  48          
  49          static const uint8_t u8x8_d_ssd1309_powersave1_seq[] = {
  50            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  51            U8X8_C(0x0ae),                    /* display off */
  52            U8X8_END_TRANSFER(),              /* disable chip */
  53            U8X8_END()                  /* end of sequence */
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 2   

  54          };
  55          
  56          static const uint8_t u8x8_d_ssd1309_128x64_flip0_seq[] = {
  57            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  58            U8X8_C(0x0a1),        /* segment remap a0/a1*/
  59            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
  60            U8X8_END_TRANSFER(),              /* disable chip */
  61            U8X8_END()                  /* end of sequence */
  62          };
  63          
  64          static const uint8_t u8x8_d_ssd1309_128x64_flip1_seq[] = {
  65            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
  66            U8X8_C(0x0a0),        /* segment remap a0/a1*/
  67            U8X8_C(0x0c0),        /* c0: scan dir normal, c8: reverse */
  68            U8X8_END_TRANSFER(),              /* disable chip */
  69            U8X8_END()                  /* end of sequence */
  70          };
  71          
  72          
  73          
  74          static uint8_t u8x8_d_ssd1309_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  75          {
  76   1        uint8_t x, c;
  77   1        uint8_t *ptr;
  78   1        switch(msg)
  79   1        {
  80   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
  81   2            u8x8_cad_StartTransfer(u8x8);
  82   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
  83   2            x *= 8;
  84   2            x += u8x8->x_offset;
  85   2          
  86   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
  87   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
  88   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
  89   2      
  90   2          
  91   2            do
  92   2            {
  93   3        c = ((u8x8_tile_t *)arg_ptr)->cnt;
  94   3        ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
  95   3        u8x8_cad_SendData(u8x8, c*8, ptr);  /* note: SendData can not handle more than 255 bytes */
  96   3        /*
  97   3        do
  98   3        {
  99   3          u8x8_cad_SendData(u8x8, 8, ptr);
 100   3          ptr += 8;
 101   3          c--;
 102   3        } while( c > 0 );
 103   3        */
 104   3        arg_int--;
 105   3            } while( arg_int > 0 );
 106   2            
 107   2            u8x8_cad_EndTransfer(u8x8);
 108   2            break;
 109   2          case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
 110   2            if ( arg_int == 0 )
 111   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave0_seq);
 112   2            else
 113   2        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_powersave1_seq);
 114   2            break;
 115   2      #ifdef U8X8_WITH_SET_CONTRAST
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 3   

 116   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 117   2            u8x8_cad_StartTransfer(u8x8);
 118   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 119   2            u8x8_cad_SendArg(u8x8, arg_int ); /* ssd1309 has range from 0 to 255 */
 120   2            u8x8_cad_EndTransfer(u8x8);
 121   2            break;
 122   2      #endif
 123   2          default:
 124   2            return 0;
 125   2        }
 126   1        return 1;
 127   1      }
 128          
 129          
 130          /*=================================================*/
 131          /* offset 2 version */
 132          
 133          /* timing from SSD1306 */
 134          static const u8x8_display_info_t u8x8_ssd1309_128x64_noname2_display_info =
 135          {
 136            /* chip_enable_level = */ 0,
 137            /* chip_disable_level = */ 1,
 138            
 139            /* post_chip_enable_wait_ns = */ 20,
 140            /* pre_chip_disable_wait_ns = */ 10,
 141            /* reset_pulse_width_ms = */ 100,   /* SSD1306: 3 us */
 142            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 143            /* sda_setup_time_ns = */ 50,   /* SSD1306: 15ns, but cycle time is 100ns, so use 100/2 */
 144            /* sck_pulse_width_ns = */ 50,  /* SSD1306: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8
             - MHz, >= 70 --> 4MHz clock */
 145            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 146            /* spi_mode = */ 0,   /* active high, rising edge */
 147            /* i2c_bus_clock_100kHz = */ 4,
 148            /* data_setup_time_ns = */ 40,
 149            /* write_pulse_width_ns = */ 150, /* SSD1306: cycle time is 300ns, so use 300/2 = 150 */
 150            /* tile_width = */ 16,
 151            /* tile_hight = */ 8,
 152            /* default_x_offset = */ 2,
 153            /* flipmode_x_offset = */ 2,
 154            /* pixel_width = */ 128,
 155            /* pixel_height = */ 64
 156          };
 157          
 158          
 159          static const uint8_t u8x8_d_ssd1309_128x64_noname_init_seq[] = {
 160              
 161            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 162            
 163            
 164            U8X8_C(0x0ae),                    /* display off */
 165            U8X8_CA(0x0d5, 0x0a0),    /* clock divide ratio (0x00=1) and oscillator frequency (0x8) */
 166            //U8X8_CA(0x0a8, 0x03f),    /* multiplex ratio */
 167            U8X8_C(0x040),              /* set display start line to 0 */
 168            U8X8_CA(0x020, 0x002),    /* horizontal addressing mode */
 169            
 170            U8X8_C(0x0a1),        /* segment remap a0/a1*/
 171            U8X8_C(0x0c8),        /* c0: scan dir normal, c8: reverse */
 172            // Flipmode
 173            // U8X8_C(0x0a0),       /* segment remap a0/a1*/
 174            // U8X8_C(0x0c0),       /* c0: scan dir normal, c8: reverse */
 175            
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 4   

 176            U8X8_CA(0x0da, 0x012),    /* com pin HW config, sequential com pin config (bit 4), disable left/right rema
             -p (bit 5) */
 177          
 178            U8X8_CA(0x081, 0x06f),    /* [2] set contrast control */
 179            U8X8_CA(0x0d9, 0x0d3),    /* [2] pre-charge period 0x022/f1*/
 180            U8X8_CA(0x0db, 0x020),    /* vcomh deselect level */  
 181            // if vcomh is 0, then this will give the biggest range for contrast control issue #98
 182            // restored the old values for the noname constructor, because vcomh=0 will not work for all OLEDs, #116
 183            
 184            U8X8_C(0x02e),        /* Deactivate scroll */ 
 185            U8X8_C(0x0a4),        /* output ram to display */
 186            U8X8_C(0x0a6),        /* none inverted normal display mode */
 187            
 188            //U8X8_C(0x0af),                    /* display on */
 189              
 190            U8X8_END_TRANSFER(),              /* disable chip */
 191            U8X8_END()                  /* end of sequence */
 192          };
 193          
 194          
 195          uint8_t u8x8_d_ssd1309_128x64_noname2(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 196          {
 197   1          
 198   1        if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 199   1          return 1;
 200   1        
 201   1        switch(msg)
 202   1        {
 203   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 204   2            if ( arg_int == 0 )
 205   2            {
 206   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 207   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 208   3            }
 209   2            else
 210   2            {
 211   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 212   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 213   3            }
 214   2            break;
 215   2          case U8X8_MSG_DISPLAY_INIT:
 216   2            u8x8_d_helper_display_init(u8x8);
 217   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 218   2            break;
 219   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 220   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname2_display_info);
 221   2            break;
 222   2          default:
 223   2            return 0;
 224   2        }
 225   1        return 1;
 226   1      }
 227          
 228          
 229          /*=================================================*/
 230          /* offset 0 version */
 231          
 232          /* timing from SSD1306 */
 233          static const u8x8_display_info_t u8x8_ssd1309_128x64_noname0_display_info =
 234          {
 235            /* chip_enable_level = */ 0,
 236            /* chip_disable_level = */ 1,
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 5   

 237            
 238            /* post_chip_enable_wait_ns = */ 20,
 239            /* pre_chip_disable_wait_ns = */ 10,
 240            /* reset_pulse_width_ms = */ 100,   /* SSD1306: 3 us */
 241            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 242            /* sda_setup_time_ns = */ 50,   /* SSD1306: 15ns, but cycle time is 100ns, so use 100/2 */
 243            /* sck_pulse_width_ns = */ 50,  /* SSD1306: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8
             - MHz, >= 70 --> 4MHz clock */
 244            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 245            /* spi_mode = */ 0,   /* active high, rising edge */
 246            /* i2c_bus_clock_100kHz = */ 4,
 247            /* data_setup_time_ns = */ 40,
 248            /* write_pulse_width_ns = */ 150, /* SSD1306: cycle time is 300ns, so use 300/2 = 150 */
 249            /* tile_width = */ 16,
 250            /* tile_hight = */ 8,
 251            /* default_x_offset = */ 0,
 252            /* flipmode_x_offset = */ 0,
 253            /* pixel_width = */ 128,
 254            /* pixel_height = */ 64
 255          };
 256          
 257          uint8_t u8x8_d_ssd1309_128x64_noname0(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 258          {
 259   1          
 260   1        if ( u8x8_d_ssd1309_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 261   1          return 1;
 262   1        
 263   1        switch(msg)
 264   1        {
 265   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 266   2            if ( arg_int == 0 )
 267   2            {
 268   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 269   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
 270   3            }
 271   2            else
 272   2            {
 273   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 274   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 275   3            }
 276   2            break;
 277   2          case U8X8_MSG_DISPLAY_INIT:
 278   2            u8x8_d_helper_display_init(u8x8);
 279   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_noname_init_seq);    
 280   2            break;
 281   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 282   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_128x64_noname0_display_info);
 283   2            break;
 284   2          default:
 285   2            return 0;
 286   2        }
 287   1        return 1;
 288   1      }
 289          
 290          
 291          /*=================================================*/
 292          /*
 293            EA OLEDS102
 294            Contributed here: https://github.com/olikraus/u8g2/pull/1497/files
 295            Manually added here, device renamed from SSD1309 to SSD1306
 296          */
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 6   

 297          
 298          static const uint8_t u8x8_d_ssd1309_102x64_ea_oleds102_init_seq[] = {
 299          
 300            U8X8_START_TRANSFER(),              /* enable chip, delay is part of the transfer start */
 301          
 302            U8X8_C(0x40),         //Set Display start line
 303            U8X8_C(0xA0),         //Bottom View no Segment remap
 304            U8X8_C(0xC0),         //Bottom View COM scan direction normal
 305            U8X8_C(0x2E),         //StartColumnAddress
 306            U8X8_CA(0x8D, 0x95),  //Switch Charge Pump (9V)
 307            U8X8_CA(0x20, 0x02),  //Set Memory AddressMode
 308            U8X8_CA(0x81, 0xFF),  //Set Brightness
 309            U8X8_CA(0xD5, 0x40),  //Set Display Clock Divide
 310            U8X8_CA(0xD9, 0xF1),  //Set Precharge Periode
 311            U8X8_CA(0xAD, 0x30),  //Set Internal Ref
 312            U8X8_CAA(0x21, 0x0D, 0x72), //Set ColumnAddress to 13x8 + 10 = 114/0x72
 313            U8X8_CAA(0x22, 0x00, 0x3F), //Set PageAddress
 314            U8X8_C(0xAF),         //Display on
 315          
 316            U8X8_END_TRANSFER(),  /* disable chip */
 317            U8X8_END()            /* end of sequence */
 318          };
 319          
 320          /* timing from SSD1306 */
 321          static const u8x8_display_info_t u8x8_ssd1309_102x64_ea_oleds102_display_info =
 322          {
 323            /* chip_enable_level = */ 0,
 324            /* chip_disable_level = */ 1,
 325          
 326            /* post_chip_enable_wait_ns = */ 20,
 327            /* pre_chip_disable_wait_ns = */ 10,
 328            /* reset_pulse_width_ms = */ 100,   /* SSD1306: 3 us */
 329            /* post_reset_wait_ms = */ 100, /* far east OLEDs need much longer setup time */
 330            /* sda_setup_time_ns = */ 50,   /* SSD1306: 15ns, but cycle time is 100ns, so use 100/2 */
 331            /* sck_pulse_width_ns = */ 50,  /* SSD1306: 20ns, but cycle time is 100ns, so use 100/2, AVR: below 70: 8
             - MHz, >= 70 --> 4MHz clock */
 332            /* sck_clock_hz = */ 4000000UL, /* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  1000000000/s
             -ck_pulse_width_ns */
 333            /* spi_mode = */ 0,   /* active high, rising edge */
 334            /* i2c_bus_clock_100kHz = */ 4,
 335            /* data_setup_time_ns = */ 40,
 336            /* write_pulse_width_ns = */ 150, /* SSD1306: cycle time is 300ns, so use 300/2 = 150 */
 337            /* tile_width = */ 13,  /* width of 13*8=104 pixel */
 338            /* tile_hight = */ 8,
 339            /* default_x_offset = */ 13, 
 340            /* flipmode_x_offset = */ 13,
 341            /* pixel_width = */ 102,
 342            /* pixel_height = */ 64
 343          };
 344          
 345          uint8_t u8x8_d_ssd1306_102x64_ea_oleds102(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 346          {
 347   1        uint8_t x, c;
 348   1        uint8_t *ptr;
 349   1      
 350   1        switch(msg)
 351   1        {
 352   2          case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
 353   2            if ( arg_int == 0 )
 354   2            {
 355   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip0_seq);
 356   3        u8x8->x_offset = u8x8->display_info->default_x_offset;
C51 COMPILER V9.60.0.0   U8X8_D_SSD1309                                                    10/18/2024 17:39:20 PAGE 7   

 357   3            }
 358   2            else
 359   2            {
 360   3        u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_128x64_flip1_seq);
 361   3        u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 362   3            }
 363   2            break;
 364   2          case U8X8_MSG_DISPLAY_INIT:
 365   2            u8x8_d_helper_display_init(u8x8);
 366   2            u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1309_102x64_ea_oleds102_init_seq);    
 367   2            break;
 368   2          case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 369   2            u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1309_102x64_ea_oleds102_display_info);
 370   2            break;
 371   2          case U8X8_MSG_DISPLAY_SET_CONTRAST:
 372   2            u8x8_cad_StartTransfer(u8x8);
 373   2            u8x8_cad_SendCmd(u8x8, 0x081 );
 374   2            u8x8_cad_SendArg(u8x8, arg_int ); /* ssd1309 has range from 0 to 255 */
 375   2            u8x8_cad_EndTransfer(u8x8);
 376   2            break;
 377   2          case U8X8_MSG_DISPLAY_DRAW_TILE:
 378   2            u8x8_cad_StartTransfer(u8x8);
 379   2      
 380   2            x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 381   2            x *= 8;
 382   2            x += u8x8->x_offset;
 383   2            u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 384   2            u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 385   2            u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 386   2      
 387   2            c = ((u8x8_tile_t *)arg_ptr)->cnt;
 388   2            c *= 8;
 389   2            ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 390   2      
 391   2            if ( c + x > 115u )
 392   2            {
 393   3              c = 115u;
 394   3              c -= x;
 395   3            }
 396   2            do
 397   2            {
 398   3              u8x8_cad_SendData(u8x8, c, ptr);  /* note: SendData can not handle more than 255 bytes */
 399   3              arg_int--;
 400   3            } while( arg_int > 0 );
 401   2      
 402   2            u8x8_cad_EndTransfer(u8x8);
 403   2            break;
 404   2          default:
 405   2            return 0;
 406   2        }
 407   1        return 1;
 408   1      }                                                                     
 409          
*** ERROR C249 IN LINE 409 OF ..\u8g2\u8x8_d_ssd1309.c: 'DATA': SEGMENT TOO LARGE

C51 COMPILATION COMPLETE.  0 WARNING(S),  1 ERROR(S)
