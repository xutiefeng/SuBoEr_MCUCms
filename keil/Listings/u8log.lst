C51 COMPILER V9.60.7.0   U8LOG                                                             10/16/2024 15:44:17 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE U8LOG
OBJECT MODULE PLACED IN .\Objects\u8log.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE ..\u8g2\u8log.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(..\Libary\Device\CMS8S
                    -6990\Include;..\Libary\StdDriver\inc;..\code;..\u8g2;..\GUI) DEBUG PRINT(.\Listings\u8log.lst) TABS(2) OBJECT(.\Objects\
                    -u8log.obj)

line level    source

   1          /*
   2          
   3            u8log.c
   4            
   5          
   6            Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   7          
   8            Copyright (c) 2018, olikraus@gmail.com
   9            All rights reserved.
  10          
  11            Redistribution and use in source and binary forms, with or without modification, 
  12            are permitted provided that the following conditions are met:
  13          
  14            * Redistributions of source code must retain the above copyright notice, this list 
  15              of conditions and the following disclaimer.
  16              
  17            * Redistributions in binary form must reproduce the above copyright notice, this 
  18              list of conditions and the following disclaimer in the documentation and/or other 
  19              materials provided with the distribution.
  20          
  21            THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  22            CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  23            INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  24            MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  25            DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  26            CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  27            SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  28            NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  29            LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  30            CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  31            STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  32            ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  33            ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  34          
  35          */
  36          
  37          #include <stdint.h>
*** WARNING C318 IN LINE 37 OF ..\u8g2\u8log.c: can't open file 'stdint.h'
  38          #include <string.h>
  39          #include "u8x8.h"
  40          
  41          
  42          /*
  43          static uint8_t u8log_is_on_screen(u8log_t *u8log, uint8_t x, uint8_t y)
  44          {
  45            if ( x >= u8log->width )
  46              return 0;
  47            if ( y >= u8log->height )
  48              return 0;
  49            return 1;
  50          }
  51          */
  52          
C51 COMPILER V9.60.7.0   U8LOG                                                             10/16/2024 15:44:17 PAGE 2   

  53          static void u8log_clear_screen(u8log_t *u8log)
  54          {
  55   1        uint8_t *dest = u8log->screen_buffer;
  56   1        uint16_t cnt = u8log->height;
  57   1        cnt *= u8log->width;
  58   1        do
  59   1        {
  60   2          *dest++ = ' ';
  61   2          cnt--;
  62   2        } while( cnt > 0 );
  63   1        
  64   1      }
  65          
  66          
  67          /* scroll the content of the complete buffer, set redraw_line to 255 */
  68          static void u8log_scroll_up(u8log_t *u8log)
  69          {
  70   1        uint8_t *dest = u8log->screen_buffer;
  71   1        uint8_t *src = dest+u8log->width;
  72   1        uint16_t cnt = u8log->height;
  73   1        cnt--;
  74   1        cnt *= u8log->width;
  75   1        do
  76   1        {
  77   2          *dest++ = *src++;
  78   2          cnt--;
  79   2        } while( cnt > 0 );
  80   1        cnt = u8log->width;
  81   1        do
  82   1        {
  83   2          *dest++ = ' ';
  84   2          cnt--;
  85   2        } while(cnt > 0);
  86   1        
  87   1        if ( u8log->is_redraw_line_for_each_char )
  88   1          u8log->is_redraw_all = 1;
  89   1        else
  90   1          u8log->is_redraw_all_required_for_next_nl = 1;
  91   1      }
  92          
  93          /*
  94            Place the cursor on the screen. This will also scroll, if required 
  95          */
  96          static void u8log_cursor_on_screen(u8log_t *u8log)
  97          {
  98   1        //printf("u8log_cursor_on_screen, cursor_y=%d\n", u8log->cursor_y);
  99   1        if ( u8log->cursor_x >= u8log->width )
 100   1        {
 101   2          u8log->cursor_x = 0;
 102   2          u8log->cursor_y++;
 103   2        }
 104   1        while ( u8log->cursor_y >= u8log->height )
 105   1        {
 106   2          u8log_scroll_up(u8log);
 107   2          u8log->cursor_y--;
 108   2        }
 109   1      }
 110          
 111          /*
 112            Write a printable, single char on the screen, do any kind of scrolling
 113          */
 114          static void u8log_write_to_screen(u8log_t *u8log, uint8_t c)
C51 COMPILER V9.60.7.0   U8LOG                                                             10/16/2024 15:44:17 PAGE 3   

 115          {
 116   1        u8log_cursor_on_screen(u8log);
 117   1        u8log->screen_buffer[u8log->cursor_y * u8log->width + u8log->cursor_x] = c;
 118   1        u8log->cursor_x++;
 119   1        
 120   1        if ( u8log->is_redraw_line_for_each_char )
 121   1        {
 122   2          u8log->is_redraw_line = 1;
 123   2          u8log->redraw_line = u8log->cursor_y;
 124   2        }
 125   1      }
 126          
 127          /*
 128            Handle control codes or write the char to the screen.
 129            Supported control codes are:
 130            
 131              \n    10    Goto first position of the next line. Line is marked for redraw.
 132              \r    13    Goto first position in the same line. Line is marked for redraw.
 133              \t    9   Jump to the next tab position
 134              \f    12    Clear the screen and mark redraw for whole screen
 135              any other char  Write char to screen. Line redraw mark depends on 
 136                  is_redraw_line_for_each_char flag.
 137          */
 138          void u8log_write_char(u8log_t *u8log, uint8_t c)
 139          {
 140   1        switch(c)
 141   1        {
 142   2          case '\n':  // 10
 143   2            u8log->is_redraw_line = 1;
 144   2            u8log->redraw_line = u8log->cursor_y;
 145   2            if ( u8log->is_redraw_all_required_for_next_nl )
 146   2        u8log->is_redraw_all = 1;
 147   2            u8log->is_redraw_all_required_for_next_nl = 0;
 148   2            u8log->cursor_y++;
 149   2            u8log->cursor_x = 0;
 150   2            break;  
 151   2          case '\r':  // 13
 152   2            u8log->is_redraw_line = 1;
 153   2            u8log->redraw_line = u8log->cursor_y;
 154   2            u8log->cursor_x = 0;
 155   2            break;
 156   2          case '\t':  // 9
 157   2            u8log->cursor_x = (u8log->cursor_x + 8) & 0xf8;
 158   2            break;
 159   2          case '\f':  // 12
 160   2            u8log_clear_screen(u8log);
 161   2            u8log->is_redraw_all = 1;
 162   2            u8log->cursor_x = 0;
 163   2            u8log->cursor_y = 0;
 164   2            break;
 165   2          default:
 166   2            u8log_write_to_screen(u8log, c);
 167   2            break;
 168   2        }
 169   1      }
 170          
 171          void u8log_Init(u8log_t *u8log, uint8_t width, uint8_t height, uint8_t *buf)
 172          {
 173   1        memset(u8log, 0, sizeof(u8log_t));
 174   1        u8log->width = width;
 175   1        u8log->height = height;
 176   1        u8log->screen_buffer = buf;
C51 COMPILER V9.60.7.0   U8LOG                                                             10/16/2024 15:44:17 PAGE 4   

 177   1        u8log_clear_screen(u8log);
 178   1      }
 179          
 180          void u8log_SetCallback(u8log_t *u8log, u8log_cb cb, void *aux_data)
 181          {
 182   1        u8log->cb = cb;
 183   1        u8log->aux_data = aux_data;
 184   1      }
 185          
 186          void u8log_SetRedrawMode(u8log_t *u8log, uint8_t is_redraw_line_for_each_char)
 187          {
 188   1        u8log->is_redraw_line_for_each_char = is_redraw_line_for_each_char;
 189   1      }
 190          
 191          /* offset can be negative or positive, it is 0 by default */
 192          void u8log_SetLineHeightOffset(u8log_t *u8log, int8_t line_height_offset)
 193          {
 194   1        u8log->line_height_offset = line_height_offset;
 195   1      }
 196          
 197          
 198          
 199          void u8log_WriteChar(u8log_t *u8log, uint8_t c)
 200          {
 201   1        u8log_write_char(u8log, c);
 202   1        if ( u8log->is_redraw_line || u8log->is_redraw_all )
 203   1        {
 204   2          if ( u8log->cb != 0 )
 205   2          {
 206   3            u8log->cb(u8log);
 207   3          }
 208   2          u8log->is_redraw_line = 0;
 209   2          u8log->is_redraw_all = 0;
 210   2        }
 211   1      }
 212          
 213          void u8log_WriteString(u8log_t *u8log, const char *s)
 214          {
 215   1        while( *s != '\0' )
 216   1        {
 217   2          u8log_WriteChar(u8log, *s);
 218   2          s++;
 219   2        }
 220   1      }
 221          
 222          static void u8log_WriteHexHalfByte(u8log_t *u8log, uint8_t b) U8X8_NOINLINE;
 223          static void u8log_WriteHexHalfByte(u8log_t *u8log, uint8_t b)
 224          {
 225   1        b &= 0x0f;
 226   1        if ( b < 10 )
 227   1          u8log_WriteChar(u8log, b+'0');
 228   1        else
 229   1          u8log_WriteChar(u8log, b+'a'-10);
 230   1      }
 231          
 232          void u8log_WriteHex8(u8log_t *u8log, uint8_t b)
 233          {
 234   1        u8log_WriteHexHalfByte(u8log, b >> 4);
 235   1        u8log_WriteHexHalfByte(u8log, b);
 236   1      }
 237          
 238          void u8log_WriteHex16(u8log_t *u8log, uint16_t v)
C51 COMPILER V9.60.7.0   U8LOG                                                             10/16/2024 15:44:17 PAGE 5   

 239          {
 240   1        u8log_WriteHex8(u8log, v>>8);
 241   1        u8log_WriteHex8(u8log, v);
 242   1      }
 243          
 244          void u8log_WriteHex32(u8log_t *u8log, uint32_t v)
 245          {
 246   1        u8log_WriteHex16(u8log, v>>16);
 247   1        u8log_WriteHex16(u8log, v);
 248   1      }
 249          
 250          /* v = value, d = number of digits (1..3) */
 251          void u8log_WriteDec8(u8log_t *u8log, uint8_t v, uint8_t d)
 252          {
 253   1        u8log_WriteString(u8log, u8x8_u8toa(v, d));
 254   1      }
 255          
 256          /* v = value, d = number of digits (1..5) */
 257          void u8log_WriteDec16(u8log_t *u8log, uint16_t v, uint8_t d)
 258          {
 259   1        u8log_WriteString(u8log, u8x8_u16toa(v, d));
 260   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1167    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      87
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
